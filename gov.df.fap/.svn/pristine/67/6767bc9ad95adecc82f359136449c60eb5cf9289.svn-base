/**
 * Created by yanqiong on 2017/8/8.
 */
require(
		[ 'jquery', 'knockout', '/df/supervise/ncrd.js', 'bootstrap', 'dateZH',
				'uui', 'tree', 'grid', 'ip' ],
		function($, ko, ncrd, _) {
			window.ko = ko;
			var tokenid;
			var options;
			var pViewType = {
				VIEWTYPE_INPUT : "001",// 录入视图
				VIEWTYPE_LIST : "002",// 列表视图
				VIEWTYPE_QUERY : "003"// 查询视图
			};
			var fileData;
			var num = 0;
			var elecode;

			var pageData = {//通过交互获取数据
				btnDatas : function(url, param) {
					var mapData = [ {
						DISPLAY_TITLE : '新增'
					}, {
						DISPLAY_TITLE : '修改'
					}, {
						DISPLAY_TITLE : '删除'
					}, {
						DISPLAY_TITLE : '提交'
					}, {
						DISPLAY_TITLE : '回收'
					} ];
					var html = ''
					$.each(mapData, function(index, item) {
						html += '<button class="btn btn-default" name="'
								+ item.DISPLAY_TITLE
								+ '" data-bind="click:btnEvents">'
								+ item.DISPLAY_TITLE + '</button>';
					})

					$('.bnt-list').html(html);
					/*$.get(url, param ,function(map){{DISPLAY_TITLE : 111},{DISPLAY_TITLE : 33}
					 //console.log(map);
					 //mapData = map.data;
					 });*/
					return mapData;
				},
			};

			//URL
			var testURL = '/df/cs/test.do';//测试
			var depTreeURL = '/df/tree/getElementData.do';//左侧下拉框
			var leftList = '/df/csofacc/getsupname.do'//左侧列表
			var addExURL = '/df/csofacc/save.do';//事项新增
			var getExURL = '/df/csofacc/get.do';//事项查询
			var updateExURL = '/df/csofacc/update.do';//事项更新
			var deleteExURL = '/df/csofacc/delete.do';//事项删除 
			var workAddURL = '/df/csofacc/worksave.do';//工作记录新增
			var workGetURL = '/df/csofacc/workget.do';//工作记录查询
			var workUpdateURL = '/df/csofacc/workupdate.do';//工作记录更新
			var workDeleteURL = '/df/csofacc/workdelete.do';//工作记录删除
			var problemAddURL = '/df/csofacc/problemsave.do';//问题记录新增
			var problemGetURL = '/df/csofacc/problemget.do';//问题记录查询
			var problemUpdateURL = '/df/csofacc/problemupdate.do';//问题记录更新
			var problemDeleteURL = '/df/csofacc/problemdelete.do';//问题记录删除
			
			
			var viewModel = {
				SearchdepTreeKEY : ko.observable(""),
				//模糊查询单位树
				searchDepTree : function() {
					ncrd.findTreeNode($.fn.zTree.getZTreeObj("depTree"),
							viewModel.SearchdepTreeKEY());
				},
				//问题GridDataTable
				questionDataTable: new u.DataTable({
			        meta: {
			            
			        }
			    }),
			    //修改问题GridDataTable
			    formDataTable: new u.DataTable({
			        meta: {
			           
			        }
			    }),
			    //工作GridDataTable
				workDataTable: new u.DataTable({
			        meta: {
			            
			        }
			    }),
			    //修改工作GridDataTable
			    workFormDataTable: new u.DataTable({
			        meta: {
			           
			        }
			    }),
			    
			    depTreeSetting: {
	                view:{
	                    showLine: false,
	                    selectedMulti: false,
	                    showIcon: false,
	                    showTitle: true
	                },
	                callback:{
	                    onClick:function(e,id,node){
	                        var selectNodeId = node.CHR_ID;
	                        var type = node.TYPE;
	               		    var code = node.CHR_CODE;
	               		    var oid = node.OID;
	                        
	                    }
	                }
	            },
	            depTreeDataTable: new u.DataTable({
	                meta: {
	                	
	                }
	            }),
			    
				btnEvents : function(data, events) {//所有单击事件
					var $this = $(events.target), name = $this[0].name;
					console.log(name);
					if (name == '新增') {
						$('#addModal').modal('show');
						if (num == 0) {
							$('#btn1').hide();
							$('#btn3').hide();
						} else {
							if (num == 3) {
								$('#btn2').hide();
								$('#btn3').show();
							} else {
								$('#btn2').show();
								$('#btn3').hide();
							}
						}

					}
					if (name == '修改') {
						$('#updateModal').modal('show');
						$('#btn1').hide();
						$('#btn3').hide();
					}
					if (name == '高级') {//高级
						console.log('111');
					}
					if (name == 'btn1') {//上一步
						num--;
						if (num == 0) {
							$('#btn1').hide();
						}
						if (num < 3) {
							$('#btn2').show();
							$('#btn3').hide();
						}
						eventsDeal.reduceStep();
						eventsDeal.modalTab();
					}
					if (name == 'btn2') {//下一步
						num++;
						$('#btn1').show();
						if (num == 3) {
							$('#btn2').hide();
							$('#btn3').show();
						}
						eventsDeal.addStep();
						eventsDeal.modalTab();
					}
					if (name == 'btn3') {//完成
						num = 0;
						eventsDeal.modalTab();
						eventsDeal.reduceStep();
						$('#addModal').modal('toggle');
						$('#btn2').show();
						$('#btn4').show();

					}
					if (name == 'btn4') {//返回

					}

				},
			    //删除操作
			    del: function(flag,rowId) {
			    	if(flag == 0){
			    		var DataTable = viewModel.workAddGridViewModel;
			    	}else if(flag == 1){
			    		var DataTable = viewModel.questionAddGridViewModel;
			    	}else if(flag == 2){
			    		var DataTable = viewModel.workGridViewModel;
			    	}else if(flag == 3){
			    		var DataTable = viewModel.questionGridViewModel;
			    	}
			        var datatableRow = DataTable.gridData.getRowByRowId(rowId);
			        //请求后端删除对应的数据；
			        // index为数据下标
			        DataTable.gridData.removeRow(datatableRow);
			    },
				//新增
				beforeEdit : function(flag,rowId, s, e) {
					if(flag == 0){
			    		var DataTable = viewModel.workAddGridViewModel;
			    		var formDataTable = viewModel.workFormDataTable;
			    		var addModel = $("#workAddModal");
			    		$("#saveWorkBtn").hide();
			    		$("#saveAddWorkBtn").show();
			    	}else if(flag == 1){
			    		var DataTable = viewModel.questionAddGridViewModel;
			    		var formDataTable = viewModel.formDataTable;
			    		var addModel = $("#questionAddModal");
			    		$("#saveQuestionBtn").hide();
			    		$("#saveAddQuestionBtn").show();
			    	}else if(flag == 2){
			    		var DataTable = viewModel.workGridViewModel;
			    		var formDataTable = viewModel.workFormDataTable;
			    		var addModel = $("#workAddModal");
			    		$("#saveWorkBtn").show();
			    		$("#saveAddWorkBtn").hide();
			    	}else if(flag == 3){
			    		var DataTable = viewModel.questionGridViewModel;
			    		var formDataTable = viewModel.formDataTable;
			    		var addModel = $("#questionAddModal");
			    		$("#saveQuestionBtn").show();
			    		$("#saveAddQuestionBtn").hide();
			    	}
					var self = this;
					viewModel.rowId = rowId;
					if (rowId && rowId != -1) {
						var datatableRow = DataTable.gridData.getRowByRowId(rowId);
						//修改操作
						var currentData = datatableRow.getSimpleData();
						formDataTable.setSimpleData(currentData);
					} else {
						//添加操作
						formDataTable.removeAllRows();
						formDataTable.createEmptyRow();
					}
					//显示模态框 
					addModel.modal("show");
					u.stopEvent(e);

				},
				saveQuestion : function(data, events) {
					viewModel.edit(3,viewModel.rowId);
					$('#questionAddModal').modal('toggle');
				},
				saveAddQuestion : function(data, events) {
					viewModel.edit(1,viewModel.rowId);
					$('#questionAddModal').modal('toggle');
				},
				modelClose : function(data, events) {
					$('#questionAddModal').modal('toggle');
				},
				saveWork : function(data, events) {
					viewModel.edit(2,viewModel.rowId);
					$('#workAddModal').modal('toggle');
				},
				saveAddWork : function(data, events) {
					viewModel.edit(0,viewModel.rowId);
					$('#workAddModal').modal('toggle');
				},
				workModelClose : function(data, events) {
					$('#workAddModal').modal('toggle');
				},
				//将操作后的数据进行保存
			    edit: function(flag,rowId) {
			    	if(flag == 0){
			    		var DataTable = viewModel.workAddGridViewModel;
			    		var formDataTable = viewModel.workFormDataTable;
			    		var addModel = $("#workAddModal");
			    		$("#saveWorkBtn").hide();
			    		$("#saveAddWorkBtn").show();
			    	}else if(flag == 1){
			    		var DataTable = viewModel.questionAddGridViewModel;
			    		var formDataTable = viewModel.formDataTable;
			    		var addModel = $("#questionAddModal");
			    		$("#saveQuestionBtn").hide();
			    		$("#saveAddQuestionBtn").show();
			    	}else if(flag == 2){
			    		var DataTable = viewModel.workGridViewModel;
			    		var formDataTable = viewModel.workFormDataTable;
			    		var addModel = $("#workAddModal");
			    		$("#saveWorkBtn").show();
			    		$("#saveAddWorkBtn").hide();
			    	}else if(flag == 3){
			    		var DataTable = viewModel.questionGridViewModel;
			    		var formDataTable = viewModel.formDataTable;
			    		var addModel = $("#questionAddModal");
			    		$("#saveQuestionBtn").show();
			    		$("#saveAddQuestionBtn").hide();
			    	}
			        //更改后台数据

			        var currentRow;
			        //如果index大于等于0说明是修改
			        if (rowId && rowId != -1) {
			            //获取需要修改的行
			            currentRow = DataTable.gridData.getRowByRowId(rowId);
			            //将用户填写的数据更新到listDataTable上
			            currentRow.setSimpleData(formDataTable.getSimpleData()[0]);
			        } else {
			            //添加数据
			        	DataTable.gridData.addSimpleData(formDataTable.getSimpleData()[0]);
			        }

			    },
			    getIdLast: function(data){//将{***}的***提取出来
		        	var par = /[{}]/g;
		        	var text = data.replace(par,'');
		        	return text;
		        },
			};
			
			//定义操作列的内容
			questionGrid = function(obj) {
		        var dataTableRowId = obj.row.value['$_#_@_id'];
		        var delfun = "data-bind=click:del.bind($data,1," + dataTableRowId + ")";
		        var editfun = "data-bind=click:beforeEdit.bind($data,1," + dataTableRowId + ")";
		        obj.element.innerHTML = '<div><i class="op uf uf-pencil" title="修改"' + editfun + '></i>' + '<i class=" op icon uf uf-del title="删除" ' + delfun + '></i></div>';
		        ko.applyBindings(viewModel, obj.element);
		    },
		    
		    workGrid = function(obj) {
		        var dataTableRowId = obj.row.value['$_#_@_id'];
		        var delfun = "data-bind=click:del.bind($data,0," + dataTableRowId + ")";
		        var editfun = "data-bind=click:beforeEdit.bind($data,0," + dataTableRowId + ")";
		        obj.element.innerHTML = '<div><i class="op uf uf-pencil" title="修改"' + editfun + '></i>' + '<i class=" op icon uf uf-del title="删除" ' + delfun + '></i></div>';
		        ko.applyBindings(viewModel, obj.element);
		    },
		    
		    workRecodeGrid = function(obj) {
		        var dataTableRowId = obj.row.value['$_#_@_id'];
		        var delfun = "data-bind=click:del.bind($data,2," + dataTableRowId + ")";
		        var editfun = "data-bind=click:beforeEdit.bind($data,2," + dataTableRowId + ")";
		        obj.element.innerHTML = '<div><i class="op uf uf-pencil" title="修改"' + editfun + '></i>' + '<i class=" op icon uf uf-del title="删除" ' + delfun + '></i></div>';
		        ko.applyBindings(viewModel, obj.element);
		    },
		    
		    questionRecodeGrid = function(obj) {
		        var dataTableRowId = obj.row.value['$_#_@_id'];
		        var delfun = "data-bind=click:del.bind($data,3," + dataTableRowId + ")";
		        var editfun = "data-bind=click:beforeEdit.bind($data,3," + dataTableRowId + ")";
		        obj.element.innerHTML = '<div><i class="op uf uf-pencil" title="修改"' + editfun + '></i>' + '<i class=" op icon uf uf-del title="删除" ' + delfun + '></i></div>';
		        ko.applyBindings(viewModel, obj.element);
		    },

			taskAdd = function() {
				$('#addModal').modal('show');
				if (num == 0) {
					$('#btn1').hide();
					$('#btn3').hide();
				} else {
					if (num == 3) {
						$('#btn2').hide();
						$('#btn3').show();
					} else {
						$('#btn2').show();
						$('#btn3').hide();
					}
				}
				eventsDeal.modalTab();
				viewModel.initData("edit", "infoAdd",pViewType.VIEWTYPE_INPUT,"1");
				viewModel.initData("", "workGrid",pViewType.VIEWTYPE_LIST,"0");
				viewModel.initData("", "questionGrid",pViewType.VIEWTYPE_LIST,"1");
			}

			var eventsDeal = {
				addStep : function() {//点击下一步切换step
					$('.u-step:eq(' + num + ')').addClass('current').siblings()
							.removeClass('current');
					$('.u-step:lt(' + num + ')').addClass('done');
					$('.step-doing').text(num + 1);
					$('.step-name').text(
							$('.u-step:eq(' + num + ') .u-step-title').text());
				},
				reduceStep : function() {//点击上一步切换step
					$('.u-step:gt(' + num + ')').removeClass('done');
					$('.u-step:eq(' + num + ')').removeClass('done');
					$('.u-step:eq(' + num + ')').addClass('current').siblings()
							.removeClass('current');
					$('.step-doing').text(num + 1);
					$('.step-name').text(
							$('.u-step:eq(' + num + ') .u-step-title').text());

				},
				modalTab : function() {//点击上一步、下一步切换modal页签
					var arr = [ 'infoAdd', 'workAdd', 'questionAdd','partAdd' ];
					$('#' + arr[num]).addClass('active').siblings()
							.removeClass('active');
				}
			}

			//生成表头
			viewModel.initData = function(areaType, areaId,viewType,order) {
				var current_url = location.search;
				$.ajax({
					url : "/df/init/initMsg.do",
					type : "GET",
					dataType : "json",
					async : true,
					data : options,
					success : function(datas) {
						viewModel.viewList = datas.viewlist;// 视图信息
						viewModel.resList = datas.reslist;// 资源信息
						viewModel.coaId = datas.coaId;// coaid
						viewModel.coaDetails = datas.coaDetail;// coa明细
						viewModel.relations = datas.relationlist;// 关联关系
//						if(isEdit == "N" && viewType == pViewType.VIEWTYPE_INPUT) {
//							viewModel.viewList = datas.viewlist;
//							for(var i=0;i<viewModel.viewList.length;i++) {
//								for(var j = 0;j<viewModel.viewList[i].viewDetail.length;j++) {
//									viewModel.viewList[i].viewDetail[j].editable = "false"
//								}
//							}
//						}
						viewModel.initGridData(areaType, areaId,viewType,order); //调用初始化表格
					}
				});
			};
			
			 // 初始化表格
	    	viewModel.initGridData = function(areaType, areaId,viewType,order) {
	            var queryViewId;
	            var tableViewDetail;
	            var queryViewDetail;
	            for ( var n = 0; n < viewModel.viewList.length; n++) {
	                var view = viewModel.viewList[n];
	                if (view.viewtype == viewType) {
	                	if(viewType == pViewType.VIEWTYPE_INPUT && view.orders == order){
	                		var viewid = viewModel.getIdLast(view.viewid);
	                		if(order == '0'){
		                		var aims = ip.initArea(view.viewDetail,areaType,viewid, areaId);
	                        }else if(order == '1'){
		                		var aims2 = ip.initArea(view.viewDetail,areaType,viewid, areaId);
	                        }
	     	           }else if(viewType == pViewType.VIEWTYPE_LIST && view.orders == order){
	     	        	    viewModel.tableViewDetail = view;
	     	        	    options["menu_id"] = menuId;
	                        payViewId = view.viewid;
	                        if(order == '0'){
		                        viewModel.workAddGridViewModel = ip.initGridWithCallBack(gridCallback,viewModel.tableViewDetail, areaId, "/df/test/btns.do",options, 1, true,false,false,false);
	                        }else if(order == '1'){
		                        viewModel.questionAddGridViewModel = ip.initGrid(viewModel.tableViewDetail, areaId, "/df/test/btns.do",options, 1, true,false,false,false);
	                        }else if(order == "2"){
		                        viewModel.workGridViewModel = ip.initGrid(viewModel.tableViewDetail, areaId, "/df/test/btns.do",options, 1, true,false,false,false);
	                        }else if(order == "3") {
		                        viewModel.questionGridViewModel = ip.initGrid(viewModel.tableViewDetail, areaId, "/df/test/btns.do",options, 1, true,false,false,false);
	                        }
	     	           }else if(viewType == pViewType.VIEWTYPE_QUERY) {
	                    	
	     	           }
	                }
	            }
	        };
	        
	        //workgrid查询
	        viewModel.workGridSearch = function () {
	        	ip.fuzzyQuery(viewModel.curGridData, "workGridSearchInput", viewModel.workGridViewModel)
	        }
	        
	        //回调函数，定义全局变量viewModel.curGridData并赋值
	        gridCallback = function(data){
	        	viewModel.curGridData = data;
	        };
	        
	        //点击工作记录exDetails-li workRecode-li questionRecode-li feedback-li file-li
			$('#exDetails-li').on('click' , function() {   
				$("#testGrid").html("");
				viewModel.initData("edit", "testGrid",pViewType.VIEWTYPE_INPUT,"0");
			});
			$('#workRecode-li').on('click' , function() {        	
				viewModel.initData("", "workRecodeGrid",pViewType.VIEWTYPE_LIST,"2");
			});
			$('#questionRecode-li').on('click' , function() {        	
				viewModel.initData("", "questionRecodeGrid",pViewType.VIEWTYPE_LIST,"3");
			});
	        
	        
//	        fileData = {
//					"entity_id":data,
//					"oid":selectNodeOid,
//					"dep_id":selectNodeId,
//					"dep_code":selectNodeCode,
//					"edit":'Y',
//			}	        
//	      //附件上传
//	        $("#fileUplode_li").click(fileData,function(event){	
//	        	$("#fileUploadPage")[0].src = "/df/supervise/attachment/attachment.html?tokenid=" + tokenid +"&menuid=" + options.svMenuId +
//	        	"&menuname=" + options.svMenuName+"&entityId="+fileData.entity_id+"&entityName=csof_sup_bill&oid="+fileData.oid+
//	        	"&dep_id="+fileData.dep_id+"&dep_code="+fileData.dep_code+"&modelFlag=0&admin="+fileData.edit;
//	        });
			
//			//初始化树
//			viewModel.initTree = function() {
//				$.ajax({
//		            type: 'get',
//		            url: depTreeURL + "?tokenid=" + tokenid + "&ajax=noCache",
//		            data: {"ele_code":elecode},
//		            dataType: 'JSON',
//		            async: true,
//		            success: function (result) {
//		            	if(result.errorCode == 0) {
//		            		var data = data;
//		            		console.log(data);
//		            		viewModel.depTreeDataTable.setSimpleData(data);
//		            		var treeObj = $.fn.zTree.getZTreeObj("depTree");
//		                    treeObj.expandAll(true);
//		                    treeObj.cancelSelectedNode();
//		            	}else {
//		            		ip.ipInfoJump(result.errorMsg, 'error');
//		            	}
//		            }, error: function () {
//		            	ip.ipInfoJump("错误", 'error');
//		            }		                
//	            });
//			}
			
			//初始化下拉框
			viewModel.initSupTypeSelect = function(){
				$("#sup_type-select").html("");
				var objSelect = document.getElementById("sup_type-select");//获得select标签对象
				var new_opt = new Option("全部", "-1"); //直接new一个option对象，然后把text和value值都赋上
                objSelect.options.add(new_opt);
				$.ajax({
		            type: 'get',
		            url: depTreeURL + "?tokenid=" + tokenid + "&ajax=noCache",
		            data: {"ele_code":elecode},
		            dataType: 'JSON',
		            async: true,
		            success: function (result) {
		            	if(result.errorCode == 0) {
		            		var data = result.data;
		            		for(var i = 0;i<data.length;i++) {
		    	                var new_opt = new Option(data[i].CHR_NAME, data[i].CHR_ID); //直接new一个option对象，然后把text和value值都赋上
		    	                objSelect.options.add(new_opt);
		    	            }
		            	}else {
		            		ip.ipInfoJump(result.errorMsg, 'error');
		            	}
		            }, error: function () {
		            	ip.ipInfoJump("错误", 'error');
		            }		                
	            });
			}
			//初始化左侧树leftList
			viewModel.leftTree = function(){
				$.ajax({
		            type: 'get',
		            url: leftList + "?tokenid=" + tokenid + "&ajax=noCache",
		            data: {"ele_code":elecode},
		            dataType: 'JSON',
		            async: true,
		            success: function (result) {
		            	if(result.errorCode == 0) {
		            		var data = result.data;
		            		console.log(data);
		            		var dep_array = [];
		            		for(var i=0;i<data.length;i++) {
		            			if(data[i].PARENT_ID == undefined) {
		            				var depArray = {
			                                "CHR_ID": data[i].CHR_ID,
			                                "CHR_CODE": data[i].CHR_CODE,
			                                "CHR_NAME": data[i].CHR_NAME,
			                                "PARENT_ID": "",
			                            }
		            			}
		            			dep_array.push(depArray);
		            		}
		            		viewModel.depTreeDataTable.setSimpleData(dep_array);
		            		var treeObj = $.fn.zTree.getZTreeObj("depTree");
		                    treeObj.expandAll(true);
		                    treeObj.cancelSelectedNode();
		            	}else {
		            		ip.ipInfoJump(result.errorMsg, 'error');
		            	}
		            }, error: function () {
		            	ip.ipInfoJump("错误", 'error');
		            }		                
	            });
			}
			
			

			//初始化
			function init() {
				app = u.createApp({
					el : document.body,
					model : viewModel
				});
				var url=window.location.href;
				elecode = url.split("elecode=")[1].split("&")[0];
	            menuId = url.split("menuid=")[1].split("&")[0];
				tokenid = ip.getTokenId();
				options = ip.getCommonOptions({});
				options['tokenid'] = tokenid;
				viewModel.initData("edit", "testGrid",pViewType.VIEWTYPE_INPUT,"0");//初始化grid
				viewModel.initSupTypeSelect();//初始化下拉框
				viewModel.leftTree();//初始化左侧树leftList
			}
			init();
		})