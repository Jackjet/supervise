package gov.df.fap.util.file2html;

import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.converter.PicturesManager;
import org.apache.poi.hwpf.converter.WordToHtmlConverter;
import org.apache.poi.hwpf.usermodel.Picture;
import org.apache.poi.hwpf.usermodel.PictureType;
import org.apache.poi.xwpf.converter.core.BasicURIResolver;
import org.apache.poi.xwpf.converter.core.FileImageExtractor;
import org.apache.poi.xwpf.converter.xhtml.XHTMLConverter;
import org.apache.poi.xwpf.converter.xhtml.XHTMLOptions;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.w3c.dom.Document;

/**
 * Word文档转换成html
 */
public class Word2HtmlUtil {

  /**
   * doc文件转换为html文件
   * @param sourceFileName 
   *         doc文件名称
   * @param rootPath 
   *         项目根路径
   * @return  
   *         Map: html的string字符串和文件路径
   * @throws Exception
   */
  public static Map<String, String> doc2Html(String sourceFileName, String rootPath) throws Exception {
    final long timeStamp = System.currentTimeMillis();
    Map<String, String> map = new HashMap<String, String>();
    File srcfile = new File(sourceFileName);
    String fileName = srcfile.getName();
    // 获取源文件名称
    String docName = fileName.substring(0, fileName.lastIndexOf("."));
    // *.html 目标文件, 添加时间戳防止多人写同一个文件
    String targetFileName = rootPath + "word2html" + timeStamp + File.separator;
    File targetFile = new File(targetFileName);
    if (!targetFile.exists()) {
      targetFile.mkdirs();
    }
    // html文件名
    String htmlName = targetFileName + docName + ".html";
    // html中图片存储
    String imagePathStr = targetFileName + "img/";
    File file = new File(imagePathStr);
    if (!file.exists()) {
      file.mkdirs();
    }
    // 读取源文件
    HWPFDocument wordDocument = new HWPFDocument(new FileInputStream(sourceFileName));
    // 创建文档对象
    Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
    // 创建Word转换成Html的转换器对象
    WordToHtmlConverter wordToHtmlConverter = new WordToHtmlConverter(document);
    // 保存图片，并返回图片的相对路径
    wordToHtmlConverter.setPicturesManager(new PicturesManager() {
      public String savePicture(byte[] content, PictureType pictureType, String name, float width, float height) {
        return "/html/word2html" + timeStamp + "/img/" + name;
      }
    });
    // 转换器对象处理Word对象
    wordToHtmlConverter.processDocument(wordDocument);
    //save pictures  
    List<Picture> pics = wordDocument.getPicturesTable().getAllPictures();
    if (pics != null) {
      FileOutputStream in = null;
      for (int i = 0; i < pics.size(); i++) {
        Picture pic = (Picture) pics.get(i);
        try {
          in = new FileOutputStream(imagePathStr + pic.suggestFullFileName());
          pic.writeImageContent(in);
        } catch (FileNotFoundException e) {
          e.printStackTrace();
        } finally {
          in.close();
        }
      }
    }
    // 获得html对象
    Document htmlDocument = wordToHtmlConverter.getDocument();
    // 根据html对象创建DOM对象
    DOMSource domSource = new DOMSource(htmlDocument);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    // 创建流对象结果
    StreamResult streamResult = new StreamResult(out);
    // 创建转换工厂
    TransformerFactory tf = TransformerFactory.newInstance();
    // 根据转换工厂创建转换器
    Transformer serializer = tf.newTransformer();
    // 转换器设置输出编码格式为UTF-8,转换方法
    serializer.setOutputProperty(OutputKeys.ENCODING, "utf-8");
    serializer.setOutputProperty(OutputKeys.INDENT, "yes");
    serializer.setOutputProperty(OutputKeys.METHOD, "html");
    // 转换
    serializer.transform(domSource, streamResult);
    out.close();
    writeFile(new String(out.toByteArray()), htmlName);
    String htmlString = new String(out.toByteArray(), "UTF-8");
    map.put("htmlString", htmlString);
    map.put("srcPath", targetFileName);
    return map;
  }

  //输出html文件   
  public static void writeFile(String content, String path) {
    FileOutputStream fos = null;
    BufferedWriter bw = null;
    try {
      File file = new File(path);
      fos = new FileOutputStream(file);
      bw = new BufferedWriter(new OutputStreamWriter(fos, "UTF-8"));
      bw.write(content);
    } catch (FileNotFoundException fnfe) {
      fnfe.printStackTrace();
    } catch (IOException ioe) {
      ioe.printStackTrace();
    } finally {
      try {
        if (bw != null)
          bw.close();
        if (fos != null)
          fos.close();
      } catch (IOException ie) {
      }
    }
  }

  /**
   * docx文件转换为html文件
   * @param sourceFileName 
   *         docx文件名称
   * @param rootPath 
   *         项目根路径
   * @throws IOException
   * @return Map: html的string字符串和文件夹路径
   * @throws Exception 
   */
  public static Map<String, String> docx2Html(String sourceFileName, String rootPath) throws Exception {
    Map<String, String> map = new HashMap<String, String>();
    final long timeStamp = System.currentTimeMillis();
    File srcfile = new File(sourceFileName);
    String fileName = srcfile.getName();
    // 获取源文件名称
    String docxName = fileName.substring(0, fileName.lastIndexOf("."));
    // *.html 目标文件,添加时间戳防止多人写同一个文件
    String targetFileName = rootPath + "word2html" + timeStamp + File.separator;
    File targetFile = new File(targetFileName);
    if (!targetFile.exists()) {
      targetFile.mkdirs();
    }
    // html文件名 
    String htmlName = targetFileName + docxName + ".html";
    // html中图片存储
    String imagePathStr = targetFileName + "img/";
    File file = new File(imagePathStr);
    if (!file.exists()) {
      file.mkdirs();
    }
    // 定义输出流
    OutputStreamWriter outputStreamWriter = null;
    try {
      // 创建docx文档对象
      XWPFDocument document = new XWPFDocument(new FileInputStream(sourceFileName));
      // 创建XHTML操作对象
      XHTMLOptions options = XHTMLOptions.create();
      // 存放图片的文件夹
      options.setExtractor(new FileImageExtractor(new File(imagePathStr)));
      // html中图片的路径,相对路径
      options.URIResolver(new BasicURIResolver("/html/word2html" + timeStamp + "/img"));
      // 初始化输出流为*.html文件
      outputStreamWriter = new OutputStreamWriter(new FileOutputStream(htmlName), "utf-8");
      // 创建xhtml文件转换器
      XHTMLConverter xhtmlConverter = (XHTMLConverter) XHTMLConverter.getInstance();
      // 转换
      xhtmlConverter.convert(document, outputStreamWriter, options);
    } catch (UnsupportedEncodingException e) {
      throw new Exception("docx2html不支持的编码类型：" + e.getMessage());
    } catch (IOException e) {
      throw new Exception("docx2html转换时IO流出现异常:" + e.getMessage());
    } finally {
      if (outputStreamWriter != null) {
        try {
          outputStreamWriter.close();
        } catch (IOException e) {
          throw new Exception("docx2html时关闭IO流出现异常:" + e.getMessage());
        }
      }
    }
    String htmlString = getString(htmlName);
    map.put("htmlString", htmlString);
    map.put("srcPath", targetFileName);
    return map;
  }

  public static String getString(String filePath) {
    String htmlStr = null;
    BufferedInputStream bis = null;
    File file = new File(filePath);
    try {
      bis = new BufferedInputStream(new FileInputStream(file));
      byte[] buffer = new byte[bis.available()];
      bis.read(buffer);
      htmlStr = new String(buffer, "UTF-8");
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      if (bis != null) {
        try {
          bis.close();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }
    return htmlStr;
  }
}
