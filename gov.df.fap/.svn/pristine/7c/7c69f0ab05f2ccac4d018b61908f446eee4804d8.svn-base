/**
 * Created by wenben on 2017/12/1.
 */
require(['jquery','knockout', 'bootstrap', 'uui','tree', 'grid', 'ip'], function($,ko) {
    window.ko = ko;

    var isEdit = false;
    var excelData = [];//表头的非空数据
    var bodyData = {};//根据sheet_id

    /* 将head的数据的为空的数据去除掉 */
    $.each(test.view.head, function (index, item) {
        if(item.cell_txt == ''){
            return;
        }else{
            excelData.push(item);
        }
    });

    /* 合并body footer数据 */
    /* excelData =  excelData.concat(test.view.body);
     excelData =  excelData.concat(test.view.foot);*/

    var viewModel = {};

    /* 公共函数类  class commonFn */
    var commonFn = {
        /* 实现金额的千分符显示 */
        toThousands : function (num) {
            var flag = false;//一个标记判断是否存在小数输入
            var lastNum = '00' ;//保存小数后面的数值
            if(num.split('.')[1]){//若存在输入小数点，则处理小数点左边的数字
                lastNum = num.split('.')[1];
                num = num.split('.')[0];
                flag = true;
            }
            //console.log(num);
            var result = [ ], counter = 0;
            num = (num || 0).toString().split('');
            for (var i = num.length - 1; i >= 0; i--) {
                counter++;
                result.unshift(num[i]);
                if (!(counter % 3) && i != 0) { result.unshift(','); }
            }
            result = result.join('');

            result = result + '.' +lastNum;

            return result;
        },

        /* 获取对象的长度 */
        getObjLength: function (obj) {
            var count = 0;
            if(typeof obj == 'object'){
                $.each(obj, function (key, val) {
                    count++;
                })
            }
            return count;
        },

        /* 实现数字的百分比显示 */
        toPrecent: function (num) {
            if(Number(num) != NaN){//将字符串数字转化为数字，判断是不是数字
                num = parseFloat(Number(num) * 100);
                // console.log(num);
                if(num.toString().split('.') == num.toString()){//判断是否存在小数点，若不存在
                    return num + '.0%' ;
                }else{
                    return num.toFixed(2) + '%';
                }

            }else{
                ip.ipInfoJump('您的输入格式错误！','info')
                return;
            }

        },

        /*
         * name ： 数据中的edit_type
         * 这个函数类似与switch（name）的写法
         * */
        findType : function (name) {//查找文本编辑类型
            var names = {
                '#s': function () {//短文本（最长64位，30个汉字） 左对齐
                    return {
                        type : 'text',
                        textAlign : 'left'
                    };
                },
                '#t': function () {//长文本（最长300位，150个汉字） 左对齐
                    return {
                        type : 'text',
                        textAlign : 'left'
                    };
                },
                '#n': function () {//数字(12)  居中
                    return {
                        type : 'number',
                        textAlign : 'center'
                    };
                },
                '#d': function () {//	日期（yyyy-mm-dd）  居中
                    return {
                        type : 'date',
                        textAlign : 'center'
                    };
                },
                '#m': function () {//金额(1230.2  右对齐
                    return {
                        type : 'money',
                        textAlign : 'right'
                    };
                },
                '#p': function () {//百分比(0.2=>20.0%)  右对齐
                    return {
                        type : 'precent',
                        textAlign : 'right'
                    };
                },
                '': function () {//空值 ‘’
                    return {
                        type : 'text',
                        textAlign : 'center'
                    }
                }
            };
            if(typeof names[name] != 'function') {
                return false;
            }
            return names[name]();//返回一个函数
        },

        /*
         * tableArr ： 构建table的数据
         * tabId ： 页签的id
         * positive: 数据存放位置
         * */
        buildTable: function (tableArr, tabId, positive) {
            var html,//需要添加的html
                arr = [],//备用数组
                arr2 = [];//二维数组

            /*
             * 思路 ： 1.先将所有数据进行分组，组成一个二维数组，[[],[],[].....]
             * 2.通过cell_code对数据进行排序
             * 3.将数组遍历，形成表格
             * */
            var rowIndex = {};//记录遍历过的row值
            //构建基础模版
            $.each(tableArr, function (index, item) {
                var col = item.col_index;//此时取得值为字符串
                var row = item.row_index - 1 + '';//对字符串进行运算强转为number，所以后面加上‘’转化为字符串形式， 赋值为key值
                //将字符串数字装换成数字
                //item.cell_txt += col+ '' + row;
                if(rowIndex[row] != undefined){//判断数组是否存在，若不存在，设置二维数组下的数为数组Arr
                    arr2[rowIndex[row]].push(item);
                }else{
                    rowIndex[row] = commonFn.getObjLength(rowIndex);//由于对象起始长度为0，数组起始index从0开始，即arr2[0] = []
                    arr2[rowIndex[row]] = [];
                    arr2[rowIndex[row]].push(item)
                }
            });


            var newArr2 = [];

            $.each(arr2, function (index, item) {
                if(item == undefined) {
                    return;
                }else{
                    newArr2.push(item);
                }
            });

            arr2 = newArr2;
            $.each(arr2, function (index, item) {
                html += '<tr class="tr'+ index +'" data-index="'+ (index + 1) +'"></tr>';
            });
            //先将所有的tr设定好
            //$('tbody').html(html);
            $('#' + tabId).find(positive).html(html);

            /* 构建显示数据td */
            $.each(arr2, function (index1,item1) {
                var tdHtml = '';
                $.each(item1, function (index2, item2) {
                    if(item2 == '' ||item2 == undefined){
                        tdHtml += '<td></td>'
                        //tdHtml += '<td style="height: 50px;width: 50px;"></td>'
                    }else{
                        //tdHtml += '<td data-id="'+ item2.csof_code +'" colspan="'+ item2.colspan +'" rowspan="'+ item2.rowspan +'" data-type="'+ item2.input_type +'" data-index="'+ item2.row_index +'" data-edit="'+ item2.is_edit +'" style="height:'+ item2.cell_height +';width:'+ item2.cell_width +';text-align:'+  commonFn.findType(item2.input_type).textAlign+' ;">'+ item2.cell_txt +'</td>';
                        //tdHtml += '<td colspan="'+ item2.colspan +'" rowspan="'+ item2.rowspan +'" style="height:'+ item2.cell_height +';width:'+ item2.cell_width +';'+ item2.cell_style +'">'+ item2.cell_txt +'</td>';
                        if(item2.input_type == '#m'){
                            tdHtml += '<td data-id="'+ item2.csof_code +'" colspan="'+ item2.colspan +'" rowspan="'+ item2.rowspan +'" data-type="'+ item2.input_type +'" data-index="'+ item2.row_index +'" data-edit="'+ item2.is_edit +'" style="height:'+ item2.cell_height +';width:'+ item2.cell_width +';text-align:'+  commonFn.findType(item2.input_type).textAlign+' ;">'+ commonFn.toThousands(item2.cell_txt) +'</td>';
                        }else if(item2.input_type == '#p'){
                            tdHtml += '<td data-id="'+ item2.csof_code +'" colspan="'+ item2.colspan +'" rowspan="'+ item2.rowspan +'" data-type="'+ item2.input_type +'" data-index="'+ item2.row_index +'" data-edit="'+ item2.is_edit +'" style="height:'+ item2.cell_height +';width:'+ item2.cell_width +';text-align:'+  commonFn.findType(item2.input_type).textAlign+' ;">'+ commonFn.toPrecent(item2.cell_txt) +'</td>';
                        }else{
                            tdHtml += '<td data-id="'+ item2.csof_code +'" colspan="'+ item2.colspan +'" rowspan="'+ item2.rowspan +'" data-type="'+ item2.input_type +'" data-index="'+ item2.row_index +'" data-edit="'+ item2.is_edit +'" style="height:'+ item2.cell_height +';width:'+ item2.cell_width +';text-align:'+  commonFn.findType(item2.input_type).textAlign+' ;">'+ item2.cell_txt +'</td>';
                        }

                    }
                });
                //$('.tr'+ index1).html(tdHtml);
                $('#' + tabId + ' '+positive).find('.tr'+ index1).html(tdHtml);

            })
        },

        /* 获取所有数据 */
        getExcData: function () {
            /* 表头数据获取 */
            var data = {
                data: '',
                view: {
                    head : '',
                    body : '',
                    foot : ''
                }
            }
            data.view.head = excelData;
            $.each(data.view.head, function (index, item) {//根据每个td 的data-id属性获取每个单元格的值，然后对原始数据值进行替换
                item.cell_txt = $('thead td[data-id="' + item.csof_code + '"]').text();
            });

            /* 表尾结构获取 */
            data.data = test.data;
            data.view.foot = test.view.foot;
            $.each(data.view.foot, function (index, item) {//根据每个td 的data-id属性获取每个单元格的值，然后对原始数据值进行替换
                item.cell_txt = $('tfoot td[data-id="' + item.csof_code + '"]').text();
            });

            /* 获取表内容的数据
             * 根据索引index获取每行值的内容，将每行值的csof_code填入值
             * */
            var getBodyArr = [];//最终将获取的body数据data
            data.view.body = test.view.body;
            //循环每个页签的内容
            //获取每个页签的data，取出对应的index_row
            //利用view.body的模版和row_index获取相对应的值，填入csof_code内容里
            //实现data数据保存，view.body模版数据不变，将数据怎么来，怎么传递给后台
            $.each(pageArr, function (index1, item1) {
                var pageListArr = [];
                $.each(data.data, function (index2, item2) {
                    if(item2.sheet_id == item1) {//页签id进行判断,对data进行分类
                        pageListArr.push(item2);
                    }
                });
                $.each(pageListArr, function (index3, item3) {
                    $.each(data.view.body, function (index, item) {//根据每个td 的data-id属性获取每个单元格的值，然后对原始数据值进行替换
                        item3[item.csof_code] = $('#'+ item1 +' tbody tr[data-index="'+ item3.row_index +'"] td[data-id="' + item.csof_code + '"]').text();
                    });
                    getBodyArr.push(item3);
                });
            });

            data.data = getBodyArr;
            console.log(data);
            return data;
        },

        /* 构建表的body部分
         * tabArr: 页签的数组
         * viewBody: view.body模版数组
         * detailData: 数据详情 data
         * */
        buildBody: function (tabArr, viewBody, detailData) {
            $.each(tabArr, function (index1, item1) {
                var dataArr = [];//根据sheet_id分出的数据数组
                var conArr = [];//获取表的data数据
                var lastData = [];//最终要生成内容的数据
                $.each(viewBody, function (index2, item2) {
                    if(item2.sheet_id == item1) {
                        dataArr.push(item2);
                    }
                });
                //提取data数据
                $.each(detailData, function (index2, item2) {
                    if(item2.sheet_id == item1) {
                        conArr.push(item2);
                    }
                });
                //将data数据塞进view.body里生成多行数据
                $.each(conArr, function (index, item) {
                    var copyData = [];//每个表内容模版的复制体
                    var indexRow = item.row_index;//提取每条数据的index
                    $.each(item, function (key, val) {
                        $.each(dataArr, function (index3, item3) {
                            if(item3.csof_code == key){
                                item3.row_index += indexRow;//将每条数据的row_index加上data数据的index形成不同的数据行
                                item3.cell_txt = val;
                            }
                        });

                    });
                    //copyData = dataArr;
                    //由于上述直接赋值只会将地址赋值过去，不会改变数组或者对象的target，导致最终所有的数组都一样
                    //注： 深度复制会导致内容过度消耗
                    //数据深度复制，$.extend(bool, obj1, obj2)
                    //bool : 是否进行深度复制
                    //详情参考： http://blog.csdn.net/shenlei19911210/article/details/46722375
                    copyData = $.extend(true, [], dataArr );
                    //console.log(copyData);
                    lastData = lastData.concat(copyData);
                });
                commonFn.buildTable(lastData, item1, 'tbody');//实现构建表内容
            });
        }
    }


    /* 实现标签页数据分离 */
    var pageObj = {};//存储页签的id name
    var pageArr = [];//存储页签的长度和id值
    $.each(excelData, function (index, item) {
        if(pageObj[item.sheet_id] == undefined){
            pageObj[item.sheet_id] = item.sheet_name;
            pageArr.push(item.sheet_id);
        }
    });

    var tabHtml = '';//标签头html
    var tabConHtml = ''
    $.each(pageObj, function (key, val) {
        tabHtml += '<li><a href="#'+ key +'" data-toggle="tab">'+ val +'</a></li>';//便签头html代码生成
        tabConHtml += '<div class="tab-pane fade" id="'+ key +'"><table class="table table-bordered"><thead></thead><tbody></tbody><tfoot></tfoot></table></div>'
    });

    /* 实现页签 */
    $('#myTab').html(tabHtml);
    $('#myTab').find('li').eq(0).addClass('active');
    $('#myTabContent').html(tabConHtml);
    $('#myTabContent').find('.tab-pane').eq(0).addClass('in active ');

    /* 构建表头 */
    $.each(pageArr, function (index1, item1) {
        var dataArr = [];//根据sheet_id分出的数据数组
        $.each(excelData, function (index2, item2) {
            if(item2.sheet_id == item1) {
                dataArr.push(item2);
            }
        });
        commonFn.buildTable(dataArr, item1, 'thead');//实现构建表
    });

    /* 构建表内容 */
    commonFn.buildBody(pageArr, test.view.body, test.data);

    /* 构建表尾 */
    $.each(pageArr, function (index1, item1) {
        var dataArr = [];//根据sheet_id分出的数据数组
        $.each(test.view.foot, function (index2, item2) {
            if(item2.sheet_id == item1) {
                dataArr.push(item2);
            }
        });
        commonFn.buildTable(dataArr, item1, 'tfoot');//实现构建表内容
    });

    /* 可编辑 */
    $('table').on('click', 'td', function () {
        var text =  $(this).text();
        if(isEdit){//判断是否点击编辑按钮
            if($(this).find('input').val() != undefined){
                return;
            }else{
                if($(this).data('edit') == '1'){//根据后台数据判断是否是可编辑状态
                    var type = commonFn.findType($(this).data('type')).type;
                    var html = '<input type="'+ type +'" value="'+ text +'" />';
                    if(type == 'money'){//若后台编辑类型为money，则显示如下类型
                        var html = '<input type="number"  aria-label="Amount (to the nearest dollar)" value="'+ Number(text.split(',').join('')) +'" />';
                    }
                    if(type == 'precent'){//若后台编辑类型为precent，则显示如下类型
                        var html = '<input type="text"  value="'+ Number(text.split('%')[0])/100 +'" />';
                    }
                    $(this).html(html);
                    $('input').focus();//给input自动获取焦点
                }else{
                    ip.ipInfoJump('表单不能编辑','info');
                }
            }
        }
    });

    /* 失去焦点去除输入框 */
    $('table').on('blur', 'input', function () {
        if($(this).parent().data('type') == '#m'){
            $(this).parent().text(commonFn.toThousands($(this).val()));//将数字转化为千分符号显示
        }else if($(this).parent().data('type') == '#p'){
            $(this).parent().text(commonFn.toPrecent($(this).val()))//将数字转化为百分比数
        }else{
            var val = $(this).val();
            $(this).parent().html('')
                .text(val);
        }
    });

    /* 编辑 */
    $('#edit').click(function () {
        isEdit = true;
        $('td[data-edit="1"]').addClass('editBg');
        $('td[data-edit="0"]').addClass('noeditBg');
        $('#cancelEdit').removeAttr('disabled');
        $('#edit').attr('disabled', 'disabled');
        //$('td').addClass('editBg');
    });

    /* 取消编辑 */
    $('#cancelEdit').click(function () {
        isEdit = false;
        /* 给是否可编辑状态添加样式 */
        $('td[data-edit="1"]').removeClass('editBg');
        $('td[data-edit="0"]').removeClass('noeditBg');

        /* 改变按钮是否可用状态 */
        $('#edit').removeAttr('disabled');
        $('#cancelEdit').attr('disabled', 'disabled');
    });

    /* 保存 */
    $('#saveExc').click(function () {
        var data = commonFn.getExcData();
    });

    /* 新增 */
    $('#addOne').click(function () {
        var id = $('#myTabContent').find('.active').attr('id');
        var arr = [];

        $.each(test.data, function (index, item) {
            if(item.sheet_id == id){
                arr.push(item);
            }
        });
        var moduleArr = $.extend(true, {}, arr[arr.length - 1]);
        $.each(moduleArr, function (key, val) {
            if(key == 'row_index'){
                moduleArr[key] = Number(val) + 1 + '';
            }
            if(key == 'id'){
                function addZero(num){//补零 1 => '01'  11 => '11'
                    if(num < 10){
                        return '0' + num;
                    }else{
                        return num + '';
                    }
                }
                moduleArr[key] = val.split('-')[0] + '-' + addZero(Number(val.split('-')[1]) + 1);

            }
            if(key.indexOf('C') > -1){
                moduleArr[key] = '';
            }
        });
        test.data.push(moduleArr);

        // console.log(test.data);

        commonFn.buildBody(pageArr, test.view.body, test.data);
    });

    var getRowClickIndex;
    /* 给点击行添加一个背景色 */
    $('table').on('click', 'tbody tr', function () {
        $(this).addClass('clickBg').siblings().removeClass('clickBg');
        getRowClickIndex = $(this).data('index');
    });

    /* 删除行 */
    $('#deleteOne').click(function () {
        var id = $('#myTabContent').find('.active').attr('id');
        if(getRowClickIndex != undefined) {
            var deleteIndex;//记录循环遍历得到与row_index getRowClickIndex相同的值
            $.each(test.data, function (index, item) {
                if(item.row_index == getRowClickIndex && item.sheet_id == id){//判断与点击的index相同的数组元素
                    deleteIndex = index;
                }
            });
            test.data.splice(deleteIndex, 1);//根据索引删除点击的数据行
        }
        commonFn.buildBody(pageArr, test.view.body, test.data);
    });

    function init(){ //整个JS代码初始化
        app = u.createApp({
            el: 'body',
            model: viewModel
        });
    }
    init();
});