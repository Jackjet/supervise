package gov.df.fap.service.login;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.web.context.support.AbstractRefreshableWebApplicationContext;

import gov.df.fap.api.fapcommon.IRoleDfCommonService;
import gov.df.fap.api.login.ICacheService;
import gov.df.fap.api.login.IUsersLogin;
import gov.df.fap.bean.portal.UserInfoDFCommon;
import gov.df.fap.service.menu.MenuOrder;
import gov.df.fap.service.util.dao.GeneralDAO;
import gov.df.fap.service.util.sessionmanager.SessionUtil;
import gov.df.fap.util.StringUtil;
import gov.df.fap.util.factory.ServiceFactory;
import gov.df.fap.util.portal.EncryptUtil;
import gov.mof.fasp2.ca.role.dto.RoleDTO;
import gov.mof.fasp2.ca.user.dto.UserDTO;
import gov.mof.fasp2.ca.user.service.IUserService;
import gov.mof.fasp2.sec.syncuserinfo.UserInfo;
import gov.mof.fasp2.sec.syncuserinfo.manager.IUserSyncManager;

public class UsersLogin extends AbstractComponentService implements IUsersLogin {

  private IUserService userservice;

  private IUserSyncManager iUserSyncManager;

  @Autowired
  private AbstractRefreshableWebApplicationContext abstractRefreshableWebApplicationContext;

  @Autowired
  @Qualifier("CacheService")
  private ICacheService cacheService;

  @Autowired
  @Qualifier("RoleService")
  private IRoleDfCommonService iRoleService;

  @Autowired
  @Qualifier("generalDAO")
  private GeneralDAO generalDAO;

  //private SessionUtil sessionUtil;

  //业务系统标志
  private static String starttype = "df";

  //获取登录类型
  public String getStarttype() {
    return abstractRefreshableWebApplicationContext.getServletContext().getInitParameter("startup");
  }

  public Map<String, Object> loginsend(HttpServletRequest req, HttpServletResponse resp) {
    String userCode = req.getParameter("userName");
    String password = req.getParameter("passWord");
    String setYear = req.getParameter("setYear");
    String rgCode = req.getParameter("rgCode");
    // 状态标志：1 成功，0 失败
    String flag = null;
    String tokenid = null;
    // fasp2.0
    UserDTO userdto = null;
    // df
    gov.df.fap.bean.user.UserDTO userdtoDF = null;
    
    Map<String, Object> map = new HashMap<String, Object>();
    try {
      starttype = getStarttype();
      String guid = "";
      String token = "";
      if ("fasp2.0".equals(starttype)) {
        userservice = (IUserService) ServiceFactory.getBean("fasp2.ca.user.service");
        iUserSyncManager = (IUserSyncManager) ServiceFactory.getBean("fasp.ca.UserSyncManager");
        // TODO ?? fasp2.0 年度区划如何实现
        userdto = userservice.login(userCode, password, 0, null);
        //userdto = userservice.login(userCode, password, Integer.valueOf(setYear), rgCode);
        guid = userdto.getGuid();
        tokenid = iUserSyncManager.doLogin(userdto, userdto.getYear(), userdto.getProvince());
        map.put("tokenid", tokenid);
      } else if ("df".equals(starttype)) {
        // TODO ?? df 年度区划如何实现
        userdtoDF = this.login(userCode, password, 0, null);
        //province = userdtoDF.getRg_code();
        //yearDF = userdtoDF.getSet_year();
        tokenid = this.doLogin(userdtoDF, setYear, rgCode, req, resp);
        guid = userdtoDF.getUser_id();
      }
      map.put("tokenid", tokenid);
      if(null == userdtoDF){
        UserInfoDFCommon.setUser(tokenid, "fasp2.0");
      }else{
        UserInfoDFCommon.setUser(tokenid, userdtoDF);
      }
      UserInfoDFCommon.resetTokenidTTL(tokenid);
      token = tokenid.substring(guid.length(), tokenid.length());
      map.put("token", token);
      flag = "1";
    } catch (Exception e) {
      e.printStackTrace();
      flag = "0";
    }
    map.put("flag", flag);
    return map;
  }

  /**
   * 登陆前密码验证
   */
  @SuppressWarnings({ "unchecked", "rawtypes" })
  public gov.df.fap.bean.user.UserDTO login(String usercode, String password, Integer year, String province) {
    gov.df.fap.bean.user.UserDTO userdtoDF = null;
    StringBuilder sql = new StringBuilder();
    List<Object> list = new ArrayList<Object>();
    sql.append("select * from sys_usermanage where user_code='" + usercode + "' ");
    sql.append(province!=null?" and rg_code='" + province + "' ":" ");
    sql.append(year!=0?" and set_year='" + year + "' ":" ");

    list = generalDAO.findBySql(sql.toString());
    if (list.size() > 0) {
      // TODO ?? 相同信息多用户如何处理（默认不会出现）
      Map map = (Map) list.get(0);
      userdtoDF = new gov.df.fap.bean.user.UserDTO(map);
    } else {
      userdtoDF = new gov.df.fap.bean.user.UserDTO();
    }

    // 密码匹配
    if (StringUtil.isNull(userdtoDF.getPassword()) && (userdtoDF.getPassword().length() == 32) && (password != null) && (password.length() != 32)) {
      password = EncryptUtil.hash(password);
    }
    if ((!(userdtoDF.getPassword().equals(password))) && (!(EncryptUtil.hash(userdtoDF.getPassword()).equals(password)))) {
      try {
        throw new Exception("11010003 密码错误!");
      } catch (Exception e) {
      }
    }

    return userdtoDF;
  }

  public String doLogin(gov.df.fap.bean.user.UserDTO userdtoDF, String yearDF, String province, HttpServletRequest req, HttpServletResponse resp) {
    // 生成tokenid
    String userid = userdtoDF.getUser_id();
    String token = StringUtil.createUUID8();
    String tokenid = userid + token;
    while(tokenid.length() < 40){//原js中有根据40位长度取tokenid的代码，兼容一下
      tokenid += "0";
    }

    // 创建cookie
    Cookie cookie = new Cookie(userid, tokenid);
    cookie.setPath("/");
    cookie.setMaxAge(-1);
    ((HttpServletResponse) resp).addCookie(cookie);
    
    //TODO 后台session是否存储用户登录信息
    //SessionUtil.setLoginCookies(userid, cookie.toString());
    UserInfoDFCommon.setUser(tokenid, userdtoDF);
    return tokenid;
  }

  public Map<String, Object> loginMessage(HttpServletRequest request, HttpServletResponse response) {
    String tokenId = request.getParameter("tokenid");
    UserDTO userdto = null;
    Object[] roleArray = null;
    Map mapMenu = null;
    RoleDTO roleDto = null;
    try {
      iUserSyncManager = (IUserSyncManager) ServiceFactory.getBean("fasp.ca.UserSyncManager");
      UserInfo uinfo = iUserSyncManager.getUser(tokenId);
      userdto = uinfo.getUser();
      String guid = userdto.getGuid();
      String sql = " exists (select 1 from fasp_t_causerrole t where t.userguid = '" + guid
        + "' and t.roleguid = fasp_t_carole.guid  ) and fasp_t_carole.status = '1' order by fasp_t_carole.code asc";
      List roleList = iRoleService.queryRolesBySql(sql);
      roleArray = new Object[roleList.size()];
      for (int i = 0; i < roleList.size(); i++) {
        roleArray[i] = roleList.get(i);
      }
      if (roleList.size() > 0) {
        roleDto = (RoleDTO) roleList.get(0);
        String roleGuid = roleDto.getGuid();

        // 用户角色查询菜单
        List menulist = iRoleService.getMenus(roleGuid);

        MenuOrder menuOrder = new MenuOrder();
        mapMenu = menuOrder.pubMenuListSort(menulist);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    // JSONArray userDtoJSONArray = new JSONArray();
    // userDtoJSONArray = JSONArray.fromObject(userdto);
    // System.out.println("-- userDto JSON - " + userDtoJSONArray);
    Map<String, Object> map = new HashMap<String, Object>();
    map.put("userDto", userdto);
    map.put("allRole", roleArray);
    map.put("mapMenu", mapMenu);
    System.out.println("-- " + mapMenu);
    map.put("curtRole", roleDto);
    return map;
  }

  public Map<String, Object> loginout(HttpServletRequest request, HttpServletResponse response) {
    String tokenId = request.getParameter("tokenid");
    String flag = null;
    try {
      starttype = getStarttype();
      if ("fasp2.0".equals(starttype)) {
        iUserSyncManager = (IUserSyncManager) ServiceFactory.getBean("fasp.ca.UserSyncManager");
        iUserSyncManager.doLogout(tokenId);
      } else if ("df".equals(starttype)) {
        UserInfoDFCommon.removeUser(tokenId);
      }

      flag = "1";
    } catch (Exception e) {
      e.printStackTrace();
      flag = "0";
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put("flag", flag);
    return map;
  }
}
