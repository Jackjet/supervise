package gov.df.fap.service.gl.core.connprovider;

import gov.df.fap.service.gl.core.interfaces.ConnectionProvider;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.hibernate3.SessionFactoryUtils;
import org.springframework.stereotype.Component;

/**
 * 只是为了从平台取连接，无奈.
 * @author 
 * @version 2007-11-3
 */
@Component("df.fap.sessionFactoryConnectionProvider")
public class SessionFactoryConnectionProvider implements ConnectionProvider {
  @Autowired
  private SessionFactory sessionFactory = null;

  public void setSessionFactory(SessionFactory sessionFactory) {
    this.sessionFactory = sessionFactory;
  }

  public Connection getConnection() {
    Session session = sessionFactory.getCurrentSession();
    return new SessionConnection(session.connection(), session);
  }

  /**
   * 用于Session关闭用，重载关闭方法，只关闭Session，不关闭Connection
   * @author
   *
   */
  class SessionConnection implements Connection {

    Connection conn = null;

    Session session = null;

    public SessionConnection(Connection conn, Session session) {
      this.conn = conn;
      this.session = session;
    }

    public void clearWarnings() throws SQLException {
      conn.clearWarnings();
    }

    /**
     * 特殊处理，不关闭，只关闭Session
     */
    public void close() throws SQLException {
      boolean existingTransaction = SessionFactoryUtils.isSessionTransactional(session, sessionFactory);
      if (existingTransaction == false) {
        SessionFactoryUtils.releaseSession(session, sessionFactory);
      }
    }

    public void commit() throws SQLException {
      conn.commit();
    }

    public Statement createStatement() throws SQLException {
      return conn.createStatement();
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
      throws SQLException {
      return conn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
      return conn.createStatement(resultSetType, resultSetConcurrency);
    }

    public boolean getAutoCommit() throws SQLException {
      return conn.getAutoCommit();
    }

    public String getCatalog() throws SQLException {
      return conn.getCatalog();
    }

    public int getHoldability() throws SQLException {
      return conn.getHoldability();
    }

    public DatabaseMetaData getMetaData() throws SQLException {
      return conn.getMetaData();
    }

    public int getTransactionIsolation() throws SQLException {
      return conn.getTransactionIsolation();
    }

    public Map getTypeMap() throws SQLException {
      return conn.getTypeMap();
    }

    public SQLWarning getWarnings() throws SQLException {
      return conn.getWarnings();
    }

    public boolean isClosed() throws SQLException {
      return conn.isClosed();
    }

    public boolean isReadOnly() throws SQLException {
      return conn.isReadOnly();
    }

    public String nativeSQL(String sql) throws SQLException {
      return conn.nativeSQL(sql);
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
      int resultSetHoldability) throws SQLException {
      return conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
      return conn.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    public CallableStatement prepareCall(String sql) throws SQLException {
      return conn.prepareCall(sql);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
      int resultSetHoldability) throws SQLException {
      return conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
      throws SQLException {
      return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
      return conn.prepareStatement(sql, autoGeneratedKeys);
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
      return conn.prepareStatement(sql, columnIndexes);
    }

    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
      return conn.prepareStatement(sql, columnNames);
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
      return conn.prepareStatement(sql);
    }

    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
      conn.releaseSavepoint(savepoint);
    }

    public void rollback() throws SQLException {
      conn.rollback();
    }

    public void rollback(Savepoint savepoint) throws SQLException {
      conn.rollback(savepoint);
    }

    public void setAutoCommit(boolean autoCommit) throws SQLException {
      conn.setAutoCommit(autoCommit);
    }

    public void setCatalog(String catalog) throws SQLException {
      conn.setCatalog(catalog);
    }

    public void setHoldability(int holdability) throws SQLException {
      conn.setHoldability(holdability);
    }

    public void setReadOnly(boolean readOnly) throws SQLException {
      conn.setReadOnly(readOnly);
    }

    public Savepoint setSavepoint() throws SQLException {
      return conn.setSavepoint();
    }

    public Savepoint setSavepoint(String name) throws SQLException {
      return conn.setSavepoint(name);
    }

    public void setTransactionIsolation(int level) throws SQLException {
      conn.setTransactionIsolation(level);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
      // TODO Auto-generated method stub
      return null;
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
      // TODO Auto-generated method stub
      return false;
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
      // TODO Auto-generated method stub

    }

    @Override
    public Clob createClob() throws SQLException {
      // TODO Auto-generated method stub
      return null;
    }

    @Override
    public Blob createBlob() throws SQLException {
      // TODO Auto-generated method stub
      return null;
    }

    @Override
    public NClob createNClob() throws SQLException {
      // TODO Auto-generated method stub
      return null;
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
      // TODO Auto-generated method stub
      return null;
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
      // TODO Auto-generated method stub
      return false;
    }

    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
      // TODO Auto-generated method stub

    }

    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
      // TODO Auto-generated method stub

    }

    @Override
    public String getClientInfo(String name) throws SQLException {
      // TODO Auto-generated method stub
      return null;
    }

    @Override
    public Properties getClientInfo() throws SQLException {
      // TODO Auto-generated method stub
      return null;
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
      // TODO Auto-generated method stub
      return null;
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
      // TODO Auto-generated method stub
      return null;
    }
  }
}
