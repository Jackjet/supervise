package gov.df.supervise.service.workflow;

import gov.df.supervise.api.workflow.WorkFlow;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ufgov.ip.apiUtils.UUIDTools;

@Service
public class WorkFlowimpl implements WorkFlow {
  @Autowired
  private workFlowDao workFlowdao;

  /**
   * 走工作流
   * @param user 用户对象
   * @param operationRemark 审核意见
   * @param dataList 数据对象
   * @param isAccount 是否记账进行额度生成/控制
   * @param autoCcid 是否自动生成CCID
   * @param autoRcid 是否自动生成RCID
  * @param inspectFlag 是否监控，false不监控，true监控
   * @return
   */
  public boolean doWorkFlow(String menu_id, String entity_id, String billtype_code, String op_type, String op_name) {
    Map<String, Object> param = new HashMap<String, Object>();
    Map<String, Object> data = workFlowdao.SelectMenuNode(menu_id);
    String wf_id = data.get("WF_ID").toString();

    String cur_node_id = data.get("CUR_NODE_ID").toString();
    System.out.println(data.get("CUR_NODE_ID").toString());
    String from_node_id = data.get("FROM_NODE_ID").toString();
    // String id = workFlowdao.SelectworkFolwId(entity_id);
    String table_name = workFlowdao.selectTableName(billtype_code);
    Date op_date = new Date();
    //String op_date = op_date1.toString();
    String trace_id = UUIDTools.uuidRandom(); // 自动生成id
    String op_user = "tt";
    if (op_type != null && op_type.equals("INPUT")) {
      int sum = workFlowdao.getCount(entity_id);
      if (sum == 0) {
        String id = UUIDTools.uuidRandom(); // 自动生成id
        param.put("id", id);
        param.put("wf_id", wf_id);
        param.put("billtype_code", billtype_code);
        param.put("table_name", table_name);
        param.put("entity_id", entity_id);
        param.put("node_id", cur_node_id);
        param.put("status_code", "1");
        param.put("op_user", op_user);
        param.put("op_date", op_date);
        workFlowdao.InsertWorkFlow(param);
      } else {
        param.put("entity_id", entity_id);
        param.put("node_id", cur_node_id);
        param.put("status_code", "1");
        param.put("op_user", op_user);
        param.put("op_date", op_date);
        workFlowdao.updateWorkFlow(param);
      }
      param.put("id", trace_id);
      param.put("wf_id", wf_id);
      param.put("billtype_code", billtype_code);
      param.put("table_name", table_name);
      param.put("entity_id", entity_id);
      param.put("pre_node_id", cur_node_id);
      param.put("pre_node_status", "0");
      param.put("cur_node_id", cur_node_id);
      param.put("cur_node_status", "1");
      param.put("menu_id", menu_id);
      param.put("op_type", op_type);
      param.put("op_name", op_name);
      param.put("op_user", op_user);
      param.put("op_date", op_date);
      workFlowdao.InsertWorkTrace(param);
      workFlowdao.updateStatus1(entity_id);
      return true;
    } else if (op_type != null && op_type.equals("NEXT")) {
      Map<String, Object> res = workFlowdao.getWFCurItem(entity_id);
      String pre_node_id = res.get("NODE_ID").toString();
      String pre_node_status = res.get("STATUS_CODE").toString();
      param.put("entity_id", entity_id);
      param.put("node_id", cur_node_id);
      param.put("status_code", "1");
      param.put("op_user", op_user);
      param.put("op_date", op_date);
      workFlowdao.updateWorkFlow(param);
      param.put("id", trace_id);
      param.put("wf_id", wf_id);
      param.put("billtype_code", billtype_code);
      param.put("table_name", table_name);
      param.put("entity_id", entity_id);
      param.put("pre_node_id", pre_node_id);
      param.put("pre_node_status", pre_node_status);
      param.put("cur_node_id", cur_node_id);
      param.put("cur_node_status", "1");
      param.put("menu_id", menu_id);
      param.put("op_type", op_type);
      param.put("op_name", op_name);
      param.put("op_user", op_user);
      param.put("op_date", op_date);
      workFlowdao.InsertWorkTrace(param);
      workFlowdao.updateStatus1(entity_id);
      return true;
    } else if (op_type != null && op_type.equals("END")) {
      //  Map<String, Object> res = workFlowdao.SelectAll(entity_id);
      String id = UUIDTools.uuidRandom(); // 自动生成id
      Map<String, Object> res = workFlowdao.getWFCurItem(entity_id);
      String pre_node_id = res.get("NODE_ID").toString();
      String pre_node_status = res.get("STATUS_CODE").toString();
      param.put("id", id);
      param.put("wf_id", wf_id);
      param.put("billtype_code", billtype_code);
      param.put("table_name", table_name);
      param.put("entity_id", entity_id);
      param.put("node_id", cur_node_id);
      param.put("status_code", 1);
      param.put("op_user", op_user);
      param.put("op_date", op_date);
      workFlowdao.InsertWorkFlowEnd(param);
      param.put("id", trace_id);
      param.put("wf_id", wf_id);
      param.put("billtype_code", billtype_code);
      param.put("table_name", table_name);
      param.put("entity_id", entity_id);
      param.put("pre_node_id", pre_node_id);
      param.put("pre_node_status", pre_node_status);
      param.put("cur_node_id", cur_node_id);
      param.put("cur_node_status", 1);
      param.put("menu_id", menu_id);
      param.put("op_type", op_type);
      param.put("op_name", op_name);
      param.put("op_user", op_user);
      param.put("op_date", op_date);
      workFlowdao.InsertWorkTrace(param);
      workFlowdao.updateStatus1(entity_id);
      return true;
    } else if (op_type != null && op_type.equals("BACK")) {
      Map<String, Object> res = workFlowdao.getWFCurItem(entity_id);
      String pre_node_id = res.get("NODE_ID").toString();
      String pre_node_status = res.get("STATUS_CODE").toString();
      param.put("entity_id", entity_id);
      param.put("node_id", cur_node_id);
      param.put("status_code", 0);
      param.put("op_user", op_user);
      param.put("op_date", op_date);
      workFlowdao.updateWorkFlow(param);
      param.put("id", trace_id);
      param.put("wf_id", wf_id);
      param.put("billtype_code", billtype_code);
      param.put("table_name", table_name);
      param.put("entity_id", entity_id);
      param.put("pre_node_id", pre_node_id);
      param.put("pre_node_status", pre_node_status);
      param.put("cur_node_id", cur_node_id);
      param.put("cur_node_status", 0);
      param.put("menu_id", menu_id);
      param.put("op_type", op_type);
      param.put("op_name", op_name);
      param.put("op_user", op_user);
      param.put("op_date", op_date);
      workFlowdao.InsertWorkTrace(param);
      workFlowdao.updateStatus2(entity_id);
      return true;
    } else if (op_type != null && op_type.equals("UNDO")) {
      Map<String, Object> res = workFlowdao.getWFCurItem(entity_id);
      String pre_node_id = res.get("NODE_ID").toString();
      String pre_node_status = res.get("STATUS_CODE").toString();
      param.put("entity_id", entity_id);
      param.put("node_id", from_node_id);
      param.put("status_code", 1);
      param.put("op_user", op_user);
      param.put("op_date", op_date);
      workFlowdao.updateWorkFlow(param);
      param.put("id", trace_id);
      param.put("wf_id", wf_id);
      param.put("billtype_code", billtype_code);
      param.put("table_name", table_name);
      param.put("entity_id", entity_id);
      param.put("pre_node_id", pre_node_id);
      param.put("pre_node_status", pre_node_status);
      param.put("cur_node_id", from_node_id);
      param.put("cur_node_status", 1);
      param.put("menu_id", menu_id);
      param.put("op_type", op_type);
      param.put("op_name", op_name);
      param.put("op_user", op_user);
      param.put("op_date", op_date);
      workFlowdao.InsertWorkTrace(param);
      workFlowdao.updateStatus2(entity_id);

    }
    return false;

  }
}
