package gov.df.supervise.service.task;

import gov.df.fap.service.util.dao.GeneralDAO;
import gov.df.fap.service.util.gl.core.CommonUtil;
import gov.df.fap.service.util.sessionmanager.SessionUtil;
import gov.df.supervise.api.task.TaskService;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;
import com.ufgov.ip.apiUtils.UUIDTools;

@Service
public class TaskBO implements TaskService {

	@Autowired
	@Qualifier("generalDAO")
	GeneralDAO dao;
	
	//监管数据期间（例： 季: 201701--  月：201701-- 询：20170101 20170102 20170103 半年：201701-- 201702-- )
	static  String [] month = new String [] {"01","02","03","04","05","06","07","08","09","10","11","12"};
    static  String [] quarter = new String [] {};
	
	/**
	 * 保存监管指向报表  
	 * @param map
	 * @return
	 */
	public int saveReport(List reportList){
		int result=0;
		if(reportList.size()>0){
			List repSqlList= new ArrayList();
			for(int i=0;i<reportList.size();i++){
				Map objMap=(Map)reportList.get(i);
				Map <String,String> repMap = new HashMap <String,String>();
				repMap.put("SID", null!=objMap.get("SID")?objMap.get("SID").toString():"" );
				repMap.put("BILLTYPE_CODE", null!=objMap.get("BILLTYPE_CODE")?objMap.get("BILLTYPE_CODE").toString():"");
				repMap.put("REPORT_ID", null!= objMap.get("REPORT_ID")? objMap.get("REPORT_ID").toString():"");    
				repMap.put("DISPLAY_TITLE", null!=objMap.get("DISPLAY_TITLE")?objMap.get("DISPLAY_TITLE").toString():"");
				repMap.put("DISPLAY_ORDER", null!=objMap.get("DISPLAY_ORDER")?objMap.get("DISPLAY_ORDER").toString():"");
				repMap.put("DISPLAY_ICON", null!=objMap.get("DISPLAY_ICON")?objMap.get("DISPLAY_ICON").toString():"");
				repMap.put("REMARK", objMap.get("REMARK")!=null?objMap.get("REMARK").toString():"");
				
				repSqlList.add(getInsertSql(repMap,"CSOF_SUP_REPORT"));
			}
			
			if(repSqlList.size()>0){
				result=dao.executeBatchBySql(repSqlList).length;
			}
		}
		return result;
	}
	
	/**
	 * 
	 */
	public List getData(String tableName,String condition){
		String sql="select * from  "+tableName+"  where 1=1 " +condition;
		return dao.findBySql(sql);
	}
	
	/**
	 * 监管事项 新增、修改方法
	 */
	public int saveTask(Map<String,String> supMap,List objList,List agencyList){
		String oid=SessionUtil.getUserInfoContext().getOrgCode();
        
		String sid=supMap.get("SID");

		 if(null!=supMap.get("ACTION")&&(!supMap.get("ACTION").equals(""))){
				String action=supMap.get("ACTION");
				if(action.equals("UPDATE")){
					//修改
					//重新保存   csof_task_sup  主键不变
					//删除 csof_dep  、CSOF_TASK_DEP_AGENCY
					deleteData("CSOF_TASK_SUP"," and sid = '"+sid+"'");
					deleteData("CSOF_TASK_DEP"," and sid = '"+sid+"'");
					deleteData("CSOF_TASK_DEP_AGENCY"," and sid = '"+sid+"'");
					deleteData("CSOF_TASK_DEP_AGENCY"," and sid = '"+sid+"'");
				}
			}
		
        String rg_code=CommonUtil.getRgCode();
        String set_year=CommonUtil.getSetYear();
        String create_user=CommonUtil.getUserCode();
        String create_date=CommonUtil.getDate("yyyy-MM-dd");
        
        supMap.put("OID", oid);
	    supMap.put("SID", sid);
	    supMap.put("CREATE_USER",create_user);
	    supMap.put("CREATE_DATE",create_date);
	    supMap.put("LATEST_OP_USER",create_user);
	    supMap.put("LATEST_OP_DATE",create_date);
	    supMap.put("RG_CODE",rg_code);
        supMap.put("SET_YEAR",set_year);
        
        int sup_num=0;
        if(null!=supMap.get("IS_ALLOBJ")&&supMap.get("IS_ALLOBJ").equals("0")&&agencyList.size()>0){
    		//部分监管要保存关联关系表
    		List agencySqlList = new ArrayList();
    		
    		for(int i=0;i<agencyList.size();i++){
    			
    			Map <String,String> agency= new HashMap<String,String>();
                Map obj = (Map) agencyList.get(i);
                String type=obj.get("TYPE").toString();
                String is_leaf= String.valueOf(obj.get("IS_LEAF"));
    			agency.put("SID", sid);
    			agency.put("DEP_ID",obj.get("DEP_ID").toString() );
    			agency.put("AGENCY_ID",obj.get("CHR_ID").toString());
    			agency.put("TYPE",obj.get("TYPE").toString());
    			agency.put("IS_LEAF",is_leaf);
    			agency.put("OID", obj.get("OID").toString());
    			
    			if(type.equals("AGENCY")&&is_leaf.equals("1")){
    				sup_num++;
    			}
    			agencySqlList.add(getInsertSql(agency,"CSOF_TASK_DEP_AGENCY"));
    		}
    		dao.executeBatchBySql(agencySqlList);
    	}else{
    		//获取监管单位数量
    		sup_num= getData("vw_csof_e_agency"," and IS_LEAF=1 and ENABLED=1").size();
    	}
        
		supMap.put("SUP_NUM", sup_num+"");
 
	    Map <String,String> depMap=new HashMap <String,String>();
	    List depSqlList=new ArrayList();
        for(int i=0;i<objList.size();i++){
        	Map obj=(Map) objList.get(i);
        	depMap.put("ID",UUIDTools.uuidRandom());
        	depMap.put("SID",sid);
    		depMap.put("SUP_NO",supMap.get("SUP_NO"));
    		depMap.put("SUP_NAME",supMap.get("SUP_NAME"));
    		depMap.put("DEP_ID",obj.get("CHR_ID").toString());
    		depMap.put("DEP_CODE",obj.get("CHR_CODE").toString());
    		depMap.put("DEP_NAME",obj.get("CHR_NAME").toString());
            depMap.put("OID", oid);
            depMap.put("SUP_NUM",sup_num+"");
            depMap.put("SUP_CYCLE", supMap.get("SUP_CYCLE"));
            depMap.put("PLAN_BEGIN_DATE",supMap.get("START_DATE"));
            depMap.put("PLAN_END_DATE",supMap.get("END_DATE"));
            depMap.put("CREATE_USER",create_user);
            depMap.put("CREATE_DATE",create_date);
            depMap.put("LATEST_OP_USER",create_user);
            depMap.put("LATEST_OP_DATE",create_date);
        	depMap.put("RG_CODE",rg_code);
        	depMap.put("SET_YEAR",set_year);
        	
        	depSqlList.add(getInsertSql(depMap, "csof_task_dep"));
        }
        
        dao.executeBatchBySql(depSqlList);
    
		supMap.remove("ACTION");

        int snum=dao.executeBySql(getInsertSql(supMap, "csof_task_sup"));

		return snum;
	}
	
	/**
	 * 通用插入sql生成
	 * @param map 插入数据Map  key:字段名  value:字段值
	 * @param tableName 插入数据表名
	 * @return
	 */
	public String getInsertSql(Map<String, String> map, String tableName) {
		String keyStr = "";
		String valueStr = "";
		for (String key : map.keySet()) {
			keyStr += key + ",";
			valueStr += "'" + map.get(key) + "',";
		}
		if (!("".equals(keyStr))) {
			keyStr = keyStr.substring(0, keyStr.length() - 1);
		}
		if (!("".equals(valueStr))) {
			valueStr = valueStr.substring(0, valueStr.length() - 1);
		}
		return "insert into " + tableName + "(" + keyStr + ") values ("
				+ valueStr + ")";
	}
	
	/**
	 * 删除方法
	 * @param tableName  要删除的表名
	 * @param condition  删除过滤条件
	 * @return 执行条目数
	 */
	public int deleteData(String tableName,String condition){
		String delSql="delete from  " + tableName + " where 1=1 "+condition;
		return dao.executeBySql(delSql);
	}

	/**
	 * 
	 */
	public int saveTaskUser(String postData) {
		List dataList = new ArrayList();
		dataList = JSONObject.parseArray(postData,Map.class);
		if(dataList.size()==1){
			Map map = (Map)dataList.get(0);
			// TO DO 
			int  cycle=Integer.parseInt(map.get("SUP_CYCLE").toString());
		//	String set_year 
			
            switch(cycle){
            	case '1':
            		
            		break;
            }

			
			
		}
		return 0;
	}
	
	
	
	
	/**
	 * 
	 * @param supCycle
	 * @param beginData
	 * @param endData
	 */
	public void getSupCycleList(String supCycle,String beginData,String  endData){
		
		
	}
}
