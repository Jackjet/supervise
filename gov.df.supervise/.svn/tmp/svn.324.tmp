package gov.df.supervise.controller.upgrade;

import gov.df.fap.util.xml.XMLData;
import gov.df.supervise.api.attachment.AttachmentService;
import gov.df.supervise.api.upgrade.csofUpgradeService;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * 补丁升级
 * @author tongya
 *
 */
@Controller
@RequestMapping(value = "/df/csofupgrade")
public class csofUpgradeController {

  private final Logger logger = LoggerFactory.getLogger(getClass());

  @Autowired
  private csofUpgradeService csofUpgradeService;

  @Autowired
  private AttachmentService attachmentService; //附件共用Service

  //查询补丁列表
  @RequestMapping(value = "/getUpgrade.do", method = RequestMethod.GET)
  @ResponseBody
  public Map<String, Object> getUpgrade(HttpServletRequest request) throws Exception {
    Map<String, Object> result = new HashMap<String, Object>();
    try {
      List data = csofUpgradeService.getUpgrade();
      result.put("data", data);
      result.put("errorCode", 0);
    } catch (Exception e) {
      result.put("errorCode", -1);
      result.put("errorMsg", "查询数据失败");
      result.put("message", e.getMessage());
    }
    return result;
  }

  //通过条件查询补丁列表
  @RequestMapping(value = "/getUpgradeByIscommit.do", method = RequestMethod.GET)
  @ResponseBody
  public Map<String, Object> getUpgradeByIscommit(HttpServletRequest request) throws Exception {
    Map<String, Object> result = new HashMap<String, Object>();
    int iscommit = Integer.parseInt(request.getParameter("iscommit"));
    try {
      List data = csofUpgradeService.getUpgradeByIscommit(iscommit);
      result.put("data", data);
      result.put("errorCode", 0);
    } catch (Exception e) {
      result.put("errorCode", -1);
      result.put("errorMsg", "查询数据失败");
      result.put("message", e.getMessage());
    }
    return result;
  }

  //删除待升级的补丁
  @RequestMapping(value = "/deleteUpgrade.do", method = RequestMethod.GET)
  @ResponseBody
  public Map<String, Object> deleteUpgrade(HttpServletRequest request) throws Exception {
    Map<String, Object> result = new HashMap<String, Object>();
    String id = request.getParameter("id");
    String file_id = request.getParameter("file_id");
    try {
      csofUpgradeService.deleteUpgrade(id);
      int num = attachmentService.deleteAttachments(file_id);
      result.put("data", "成功删除【" + num + "】条记录");
      result.put("errorCode", 0);
    } catch (Exception e) {
      result.put("errorCode", -1);
      result.put("errorMsg", "删除数据失败");
      result.put("message", e.getMessage());
    }
    return result;
  }

  //上传
  @RequestMapping(value = "/saveUpgrade.do", method = RequestMethod.GET)
  @ResponseBody
  public Map<String, Object> saveUpgrade(HttpServletRequest request) throws Exception {
    Map<String, Object> result = new HashMap<String, Object>();
    String id = request.getParameter("id");
    String app_version = null != request.getParameter("app_version") ? request.getParameter("app_version") : "";
    String remark = null != request.getParameter("remark") ? request.getParameter("remark") : "";
    String modular = null != request.getParameter("modular") ? request.getParameter("modular") : "";
    String pwd = null != request.getParameter("pwd") ? request.getParameter("pwd") : "";
    try {
      if (pwd.equals("123456")) {
        csofUpgradeService.saveUpgrade(id, remark);
        result.put("errorCode", 0);
      } else {
        result.put("errorCode", "密码错误，sb你有三次机会输入，超过三次系统自动爆炸，骚年们给点力");
      }
    } catch (Exception e) {
      result.put("errorCode", -1);
      result.put("errorMsg", "新增数据失败");
      result.put("message", e.getMessage());
    }
    return result;
  }

  //上传
  @RequestMapping(value = "/doUpgrade.do", method = RequestMethod.GET)
  @ResponseBody
  public Map<String, Object> doUpgrade(HttpServletRequest request) throws Exception {
    Map<String, Object> result = new HashMap<String, Object>();
    // String uploadMode = attachmentService.getUploadMode();
    String UPLOAD_FTP_IP = attachmentService.getUploadFtpIp();
    String UPLOAD_FTP_PORT = attachmentService.getUploadFtpPort();
    String UPLOAD_FTP_USER = attachmentService.getUploadFtpUser();
    String UPLOAD_FTP_PASSWORD = attachmentService.getUploadFtpPassword();
    String attachId = request.getParameter("file_id");
    String id = request.getParameter("id");
    List list = attachmentService.getAttachById(attachId);
    XMLData attach = (XMLData) list.get(0);
    String filePath = attach.get("file_url").toString();
    try {
      csofUpgradeService.doUpgrade(id, filePath, UPLOAD_FTP_IP, UPLOAD_FTP_PORT, UPLOAD_FTP_USER, UPLOAD_FTP_PASSWORD);
      result.put("errorCode", 0);
    } catch (Exception e) {
      result.put("errorCode", -1);
      result.put("errorMsg", "新增数据失败");
      result.put("message", e.getMessage());
    }
    return result;
  }
}
