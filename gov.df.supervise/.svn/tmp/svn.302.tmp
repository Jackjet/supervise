/**
 * <p>
 * Title:
 * </p>
 * <p>
 * Description:
 * </p>
 * <p>
 * Copyright: Copyright (c) 2017 北京用友政务软件有限公司
 * </p>
 * <p>
 * Company: 北京用友政务软件有限公司
 * </p>
 * <p>
 * CreateData: 2017-11-15下午8:30:57
 * </p>
 * 
 * @author songlr3
 * @version 1.0
 */
package gov.df.supervise.service.view;

import gov.df.fap.service.util.sessionmanager.SessionUtil;
import gov.df.fap.util.Tools;
import gov.df.supervise.api.view.CsofViewService;
import gov.df.supervise.bean.view.CsofCViewCellEntity;
import gov.df.supervise.bean.view.CsofCViewEntity;
import gov.df.supervise.bean.view.CsofCViewSheetEntity;
import gov.df.supervise.bean.view.CsofSupDataEntity;
import gov.df.supervise.service.common.SessionUtilEx;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ufgov.ip.apiUtils.UUIDTools;

@Service
public class CsofViewServiceImpl implements CsofViewService {

  @Autowired
  private CsofCViewDao csofCViewDao;

  @Autowired
  private CsofCViewCellDao csofCViewCellDao;

  @Autowired
  private CsofCViewSheetDao csofCViewSheetDao;

  @Autowired
  private CsofSupDataDao csofSupDataDao;

  public String getYear() {
    return SessionUtilEx.getLoginYear();
  }

  public String getRgCode() {
    return SessionUtilEx.getRgCode();
  }

  public String getDate() {
    return Tools.getCurrDate();
  }

  public String getUser() {
    return SessionUtil.getUserInfoContext().getUserID();
  }

  public void saveCsofView(String viewId, String name, String viewName) {
    CsofCViewEntity csofView = new CsofCViewEntity();
    csofView.setViewId(viewId);
    csofView.setViewName(name);
    csofView.setViewCode(null);
    csofCViewDao.insert(csofView);
  }

  public void saveCsofViewCell(CsofCViewCellEntity csofViewCell) {
    csofCViewCellDao.insert(csofViewCell);
  }

  public void saveCsofCView(CsofCViewEntity csofCView) {
    csofCViewDao.insertSelective(csofCView);
  }

  public void saveCsofCViewSheet(CsofCViewSheetEntity csofCViewSheet) {
    csofCViewSheet.setCreateDate(getDate());
    csofCViewSheet.setLastVer(getDate());
    csofCViewSheet.setIsValid((short) 1);
    csofCViewSheetDao.insertSelective(csofCViewSheet);
  }

  public void saveCsofCViewCell(CsofCViewCellEntity csofCViewCell) {
    csofCViewCellDao.insertSelective(csofCViewCell);
  }

  public List<CsofCViewCellEntity> selectIsEdit(String sheetId) {
    return csofCViewCellDao.selectIsEditBySheetId(sheetId);
  }

  public void crestTable(String dataTable, String sql) {
    Map<String, Object> map = new HashMap<String, Object>();
    map.put("dataTable", dataTable);
    map.put("sql", sql);
    csofCViewCellDao.crestTable(map);
  }

  @SuppressWarnings({ "rawtypes" })
  public void saveExcel(Map data) {

  }

  /**
   * 按照sheet页签 逐行 逐格进行解析
   * @param wookbook
   * @param viewID
   * @return
   * @author songlr3 at 2017-11-17下午4:48:59
   */
  @SuppressWarnings({ "unused" })
  public void getExcel(Workbook wookbook, String viewID, String viewCode) {
    Map<String, Object> mapC = new HashMap<String, Object>();//列
    Map<String, Object> mapR = new HashMap<String, Object>();//行
    int sheetsNum = wookbook.getNumberOfSheets();
    String viewId = viewID;
    //循环excel中sheet表
    for (int i = 0; i < sheetsNum; i++) {
      CsofCViewSheetEntity csofCViewSheet = new CsofCViewSheetEntity();
      Sheet sheet = wookbook.getSheetAt(i);
      String sheetName = sheet.getSheetName();
      int lastRowNum = sheet.getLastRowNum();
      Map<String, String> map[] = getRowSpanColSpanMap(sheet);
      Row row = null; // 兼容
      Cell cell = null; // 兼容
      mapC = getmapC(sheet);//{3=zjzf, 2=dwmc, 1=dwbm, 5=hj, 4=sqzf}
      mapR = getmapR(sheet);//{3=3, 2=2, 1=1, 4=4}
      String sheetId = UUIDTools.uuidRandom();
      csofCViewSheet.setViewId(viewId);
      csofCViewSheet.setSheetId(sheetId);
      String sheetCode = sheetName.split("_")[0];
      String sheetname = sheetName.split("_")[1];
      csofCViewSheet.setSheetCode(sheetCode);
      csofCViewSheet.setSheetName(sheetname);
      boolean sheetType = false;
      short sheettype = 0;
      for (int r = 1; r <= mapR.size(); r++) {
        if (((String) mapR.get(String.valueOf(r))).subSequence(0, 1).equals("b")) {
          sheetType = true;
        }
      }
      if (sheetType == true) {
        sheettype = 2;//列表式
      } else {
        sheettype = 1;//凭证式
      }
      csofCViewSheet.setSheetType(sheettype);
      csofCViewSheet.setSheetIndex((short) (i + 1));
      String dataTable = "csof_d_" + viewCode + "_" + sheetCode;
      csofCViewSheet.setDataTable(dataTable);
      saveCsofCViewSheet(csofCViewSheet);
      //循环sheet表中行列单元格
      for (int rowNum = 1; rowNum <= lastRowNum; rowNum++) {
        row = sheet.getRow(rowNum);
        if (row != null) {
          int lastColNum = row.getLastCellNum();
          for (int colNum = 1; colNum < lastColNum; colNum++) {
            CsofCViewCellEntity csofCViewCell = new CsofCViewCellEntity();
            cell = row.getCell(colNum);
            if (cell != null) {
              csofCViewCell.setViewId(viewId);
              csofCViewCell.setSheetId(sheetId);
              csofCViewCell.setCellId(UUIDTools.uuidRandom());
              csofCViewCell.setCellCode(cell.getAddress().toString());
              csofCViewCell.setCsofCode("c" + "_" + mapC.get(String.valueOf(colNum)) + "_"
                + mapR.get(String.valueOf(rowNum)));
              if (!cell.toString().equals("")) {
                if (cell.toString().substring(0, 1).equals("#")) {
                  csofCViewCell.setInputType(cell.toString().toUpperCase());
                  csofCViewCell.setIsEdit((short) 1);
                } else {
                  csofCViewCell.setCellTxt(cell.toString());
                  csofCViewCell.setInputType(null);
                  csofCViewCell.setIsEdit((short) 0);
                }
              } else {
                csofCViewCell.setInputType(null);
                csofCViewCell.setIsEdit((short) 0);
              }

              csofCViewCell.setColIndex((short) colNum);
              csofCViewCell.setRowIndex((short) rowNum);
              if (map[0].containsKey(rowNum + "," + colNum)) {
                String pointString = map[0].get(rowNum + "," + colNum);
                map[0].remove(rowNum + "," + colNum);
                int bottomeRow = Integer.valueOf(pointString.split(",")[0]);
                int bottomeCol = Integer.valueOf(pointString.split(",")[1]);
                int rowSpan = bottomeRow - rowNum + 1;
                int colSpan = bottomeCol - colNum + 1;
                csofCViewCell.setRowspan((short) rowSpan);
                csofCViewCell.setColspan((short) colSpan);
              } else if (map[1].containsKey(rowNum + "," + colNum)) {
                map[1].remove(rowNum + "," + colNum);
                csofCViewCell.setRowspan((short) 1);
                csofCViewCell.setColspan((short) 1);
              } else {
                csofCViewCell.setRowspan((short) 0);
                csofCViewCell.setColspan((short) 0);
              }
              //							csofCViewCell.setCellHeight(cellHeight);	  
              csofCViewCell.setCellWidth(String.valueOf(cell.getSheet().getColumnWidthInPixels(colNum)));
              //							csofCViewCell.setCellStyle(cellStyle);
              //							csofCViewCell.setCellFormula(cellFormula);
              csofCViewCell.setIsShow((short) 1);
              if (((String) mapR.get(String.valueOf(rowNum))).substring(0, 1).equals("b")) {
                csofCViewCell.setIsListRow((short) 1);
              } else {
                csofCViewCell.setIsListRow((short) 0);
              }
              if (csofCViewCell.getRowspan() == (short) 0 && csofCViewCell.getColspan() == (short) 0) {
                csofCViewCell.setIsSpan((short) 0);
              } else {
                csofCViewCell.setIsSpan((short) 1);
              }
              saveCsofCViewCell(csofCViewCell);
            }
          }
        }
      }
      List<CsofCViewCellEntity> isEditdata = selectIsEdit(sheetId);
      String sql;
      sql = "(data_id VARCHAR2(64),last_ver VARCHAR2(20),row_id VARCHAR2(64),row_index NUMBER(10)";
      for (int isEdit = 0; isEdit < isEditdata.size(); isEdit++) {
        String inputType = isEditdata.get(isEdit).getInputType();
        String name = isEditdata.get(isEdit).getCsofCode();
        String type = getparam().get(inputType);
        if (isEdit == isEditdata.size() - 1) {
          String e = "," + name + " " + type + ")";
          sql = sql + e;
        } else {
          String m = "," + name + " " + type;
          sql = sql + m;
        }
      }
      crestTable(dataTable, sql);
    }
  }

  /**
   * 通过excel原单元格，确定自带单元格行坐标，如B1:c1:1
   * @param sheet
   * @return
   * @author songlr3 at 2017-11-17上午11:12:26
   */
  private static Map<String, Object> getmapR(Sheet sheet) {
    Map<String, Object> map = new HashMap<String, Object>();
    Row row = null;
    Cell cell = null;
    int colNum = 0;
    int lastRowNum = sheet.getLastRowNum();
    for (int rowNum = 1; rowNum <= lastRowNum; rowNum++) {
      row = sheet.getRow(rowNum);
      cell = row.getCell(colNum);
      String name = cell.toString();
      //			String name = cell.toString().substring(0,cell.toString().indexOf("."));
      map.put(String.valueOf(rowNum), name);
    }
    return map;
  }

  /**
   * 通过excel原单元格，确定自带单元格列坐标，如B:r1:1
   * @param sheet
   * @return
   * @author songlr3 at 2017-11-17上午10:06:34
   */
  private static Map<String, Object> getmapC(Sheet sheet) {
    Map<String, Object> map = new HashMap<String, Object>();
    Cell cell = null;
    int rowNum = 0;
    Row row = sheet.getRow(rowNum);
    int lastColNum = row.getLastCellNum();
    for (int colNum = 1; colNum < lastColNum; colNum++) {
      cell = row.getCell(colNum);
      String name = cell.toString();
      map.put(String.valueOf(colNum), name);
    }
    return map;
  }

  /**
   *获取sheet表中合并的单元格位置坐标 
   * @param sheet
   * @return
   * @author songlr3 at 2017-11-28上午9:29:48
   */
  @SuppressWarnings({ "rawtypes", "unchecked" })
  private static Map<String, String>[] getRowSpanColSpanMap(Sheet sheet) {
    Map<String, String> map0 = new HashMap<String, String>();
    Map<String, String> map1 = new HashMap<String, String>();
    int mergedNum = sheet.getNumMergedRegions();
    CellRangeAddress range = null;
    for (int i = 0; i < mergedNum; i++) {
      range = sheet.getMergedRegion(i);
      int topRow = range.getFirstRow();//第一行
      int topCol = range.getFirstColumn();//第一列
      int bottomRow = range.getLastRow();//最后一行
      int bottomCol = range.getLastColumn();//最后一列
      map0.put(topRow + "," + topCol, bottomRow + "," + bottomCol);
      int tempRow = topRow;
      while (tempRow <= bottomRow) {
        int tempCol = topCol;
        while (tempCol <= bottomCol) {
          map1.put(tempRow + "," + tempCol, "");
          tempCol++;
        }
        tempRow++;
      }
      map1.remove(topRow + "," + topCol);
    }
    Map[] map = { map0, map1 };
    return map;
  }

  /**
   * 获取相对应的数据类型
   */
  private static Map<String, String> getparam() {
    Map<String, String> param = new HashMap<String, String>();
    param.put("#S", "VARCHAR2(64)");
    param.put("#T", "VARCHAR2(200)");
    param.put("#M", "NUMBER(16,2)");
    param.put("#N", "NUMBER(10)");
    param.put("#P", "NUMBER(10,1)");
    param.put("#D", "VARCHAR2(20)");
    return param;
  }

  public void getExcelInfo(XSSFWorkbook xWb, String viewId, String viewCode) {
    getExcel(xWb, viewId, viewCode);
  }

  public void getExcelInfo(HSSFWorkbook hWb, String viewId, String viewCode) {
    getExcel(hWb, viewId, viewCode);
  }

  @SuppressWarnings("rawtypes")
  public Map<String, Map<String, List<Map>>> getExcel(String viewId) {
    Map<String, Map<String, List<Map>>> dataExcel = new HashMap<String, Map<String, List<Map>>>();
    Map<String, List<Map>> list = new HashMap<String, List<Map>>();
    List<Map> excelData = csofCViewCellDao.getExcel(viewId);
    List<Map> head = new ArrayList<Map>();
    List<Map> body = new ArrayList<Map>();
    List<Map> foot = new ArrayList<Map>();
    Map<String, List<Map>> d_data = new HashMap<String, List<Map>>();
    for (int i = 0; i < excelData.size(); i++) {
      if (((String) excelData.get(i).get("CSOF_CODE")).split("_")[2].substring(0, 1).equals("h")) {
        head.add(excelData.get(i));
      } else if (((String) excelData.get(i).get("CSOF_CODE")).split("_")[2].substring(0, 1).equals("f")) {
        foot.add(excelData.get(i));
      } else {
        body.add(excelData.get(i));
      }
    }
    list.put("head", head);
    list.put("foot", foot);
    list.put("body", body);
    List<CsofSupDataEntity> csofSupData = csofSupDataDao.selectByViewId(viewId);
    if (!csofSupData.isEmpty()) {
      for (int j = 0; j < csofSupData.size(); j++) {
        String dataTable = csofSupData.get(j).getDataTable();
        //				String sheetId = csofSupData.get(j).getSheetId();
        String dataId = csofSupData.get(j).getDataId();
        String sql = "select c.*,d.sheet_id,d.view_id from csof_sup_data d," + dataTable + " c where c.data_id="
          + dataId + "and d.data_id=" + dataId;
        List<Map> data = csofSupDataDao.getExcelData(sql);
        //				d_data.addAll(data);
        d_data.put("data", data);
      }
    }
    dataExcel.put("view", list);
    dataExcel.put("data", d_data);
    return dataExcel;
  }

}
