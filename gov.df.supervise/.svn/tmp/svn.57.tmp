package gov.df.supervise.controller.attachment;

import gov.df.fap.service.util.gl.core.CommonUtil;
import gov.df.supervise.api.attachment.AttachmentService;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.ufgov.ip.apiUtils.UUIDTools;

@Controller
@RequestMapping(value = "/df/cs")
public class AttachmentController {
	
	
	/**
	   * 文件后缀—类型映射表
	   */
	static java.util.Hashtable sufmap = new java.util.Hashtable();
	  /**
	   * 设置所有后缀—类型映射
	   */
	static {
	      fillMap();
	}
	  /**
	   * 设置后缀_类型映射
	   * @param k 后缀
	   * @param v 类型
	   */
	  static void setSuffix(String k, String v) {
		  sufmap.put(k, v);
	  }
	  /**
	   * 设置所有后缀—类型映射
	   *
	   */
	  static void fillMap() {
	      setSuffix("", "content/unknown");
	      setSuffix(".zip", "application/zip");
	      setSuffix(".gif", "image/gif");
	      setSuffix(".png", "image/png");
	      setSuffix(".jpg", "image/jpeg");
	      setSuffix(".jpeg", "image/jpeg");
	      setSuffix(".htm", "text/html");
	      setSuffix(".html", "text/html");
	      setSuffix(".text", "text/plain");
	      setSuffix(".txt", "text/plain");
	      setSuffix(".java", "text/plain");
	      setSuffix(".doc", "application/msword");
	      setSuffix(".docx", "application/msword");
	      setSuffix(".xls", "application/vnd.ms-excel");
	      setSuffix(".xlsx", "application/vnd.ms-excel");
	      setSuffix(".ppt", "application/mspowerpoint");
	      setSuffix(".pptx", "application/mspowerpoint");
	      setSuffix(".pdf", "application/pdf");
	  }
	
	final String FILE_SYSTEM_MODE = "0";
	final String DATABASE_MODE = "1";

	@Autowired
	private AttachmentService attachmentService;

	@RequestMapping(value = "/getAttachList.do", method = { RequestMethod.GET })
	@ResponseBody
	public Map<String, Object> getAttachList(HttpServletRequest request) {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			List attachList = null;
			String condition="";
			if(null!=request.getParameter("condition")){
				condition=request.getParameter("condition");
			}
			attachList = attachmentService.getAttachList(condition);
			map.put("errorCode", "0");
			map.put("totalElements", attachList.size());
			map.put("flag", true);
			map.put("dataDetail", attachList);
		} catch (Exception e) {
			e.printStackTrace();
			map.put("errorCode", "1");
			map.put("errorMsg", "获取附件出现异常");
		}
		return map;
	}
	
	@RequestMapping(value = "/delAttach.do", method = { RequestMethod.GET })
	@ResponseBody
	public Map<String, Object> delAttachById(HttpServletRequest request) {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if(null!=request.getParameter("ids")&&!("".equals(request.getParameter("ids")))){
				String ids=request.getParameter("ids");
				int num=attachmentService.deleteAttachments(ids);
				map.put("errorCode", "0");
			    map.put("data", "成功删除【"+num+"】条记录");
			    String files=request.getParameter("files");
			    String [] fileArray=files.split(",");
			    for(int i=0;i<fileArray.length;i++){
			    	File file=new File(fileArray[i]);
			    	if(file.exists()&&file.isFile()) {
			    			file.delete();
			        }
			    }
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		    map.put("errorCode", "1");
		    map.put("errorMsg", "删除出现异常");
		}
		return map;
	}
	
	/*
     *采用spring提供的上传文件的方法
     */
	@RequestMapping(value = "/uploadAttach.do", method = { RequestMethod.POST })
	@ResponseBody
    public Map  springUpload(HttpServletRequest request) throws IllegalStateException, IOException {
         long  startTime=System.currentTimeMillis();
         Map map=new HashMap();
       
         String entityId=request.getParameter("entityId");
         String entityName=request.getParameter("entityName");
         String uploadMode = attachmentService.getUploadMode();
         String uploadRootPath = attachmentService.getUploadRootPath();

         if (uploadMode == null || "".equals(uploadMode) || uploadMode.trim().isEmpty()
           || !(FILE_SYSTEM_MODE.equals(uploadMode) || DATABASE_MODE.equals(uploadMode))) {
           map.put("errorCode", "-1");
           map.put("errorMsg", "上传模式类型无法获知！");
           return map;
         }

         if (uploadRootPath == null || "".equals(uploadRootPath) || uploadRootPath.trim().isEmpty()) {
           map.put("errorCode", "-1");
           map.put("errorMsg", "上传根目录不存在！");
           return map;
         }
         
         //将当前上下文初始化给  CommonsMutipartResolver （多部分解析器）
        CommonsMultipartResolver multipartResolver=new CommonsMultipartResolver(
                request.getSession().getServletContext());
        //检查form中是否有enctype="multipart/form-data"
        if(multipartResolver.isMultipart(request))
        {
            //将request变成多部分request
            MultipartHttpServletRequest multiRequest=(MultipartHttpServletRequest)request;
           //获取multiRequest 中所有的文件名
            Iterator iter=multiRequest.getFileNames();
            
            Map<String,MultipartFile> multMap= multiRequest.getFileMap();
            while(iter.hasNext())
            {
                //一次遍历所有文件
                MultipartFile file=multiRequest.getFile(iter.next().toString());
                if(file!=null)
                {
                    String fileName=file.getOriginalFilename();
                    String oid=request.getParameter("oid");
                    String dep_id=request.getParameter("dep_id");
                    String dep_code=request.getParameter("dep_code");
                    String user_code=CommonUtil.getUserCode();
                    String set_year=CommonUtil.getSetYear();
                	String file_type=fileName.substring(fileName.lastIndexOf(".")+1);
                	String remark=request.getParameter("remark");
                    String path=uploadRootPath+File.separator+set_year+File.separator+file_type+File.separator+oid+File.separator+
                   		 dep_code+File.separator+user_code+File.separator;
                    
                    if (!(new File(path).isDirectory())){  
                   	 	makeDir(path,false);
                    } 
                    
                    String pathFile=path+file.getOriginalFilename();
                    File fileUpload=new File(pathFile);
                    //上传
                    file.transferTo(fileUpload);
                    
            		String id = UUIDTools.uuidRandom(); // 自动生成id
                    Map<String,String> attachMap=new HashMap<String,String>();
                    attachMap.put("id", id);
                    attachMap.put("entity_name", entityName );
                    attachMap.put("entity_id", entityId);
                    attachMap.put("file_no", "");
                    attachMap.put("file_name", fileName);
                    attachMap.put("file_size", file.getSize()+"");
                    attachMap.put("file_type", file_type);
                    attachMap.put("file_url", pathFile);
                    attachMap.put("remark", remark);
                    attachMap.put("latest_op_user", CommonUtil.getUserCode());
                    attachMap.put("latest_op_date", getDate());
                    attachMap.put("create_user", CommonUtil.getUserCode());
                    attachMap.put("create_date", getDate());
                    attachMap.put("set_year", CommonUtil.getSetYear());
                    attachMap.put("status", "");
                    attachMap.put("org_code", dep_id);
                    attachMap.put("rg_code", CommonUtil.getRgCode());
                    attachmentService.saveAttachment(attachMap);
                }
                 
            }
           
        }
        return map; 
    }
	
	  @RequestMapping(value = "/downloadAttach.do", method = { RequestMethod.POST})
	  @ResponseBody
	  public Map<String, Object> download(HttpServletRequest request, HttpServletResponse response) {
	    Map<String, Object> map = new HashMap<String, Object>();
	    String filePath=request.getParameter("attach_url");
	      File file = new File(filePath);
	       if (!file.exists()) {
	          map.put("errorCode", "-1");
	          map.put("errorMsg", "下载的文件不存在，可能已经被移除！");
	          return map;
	  
	        }
	      OutputStream out = null;
	      InputStream in = null;
	      try {
	    	  String fileName = file.getName();
	    	  out = response.getOutputStream();
	    	  fileName = URLEncoder.encode(fileName,"UTF-8");//转码，很重要 
	    	  response.addHeader("Content-Disposition", "attachment;filename=" + fileName);//设置文件名，	    	 
	    	  response.setContentType("application/octet-stream");
	    	  response.setCharacterEncoding("UTF-8");
	    	  in = new FileInputStream(file);
	    	  byte[] b = new byte[2048];
			  int size=in.read(b);
			  while(size!=-1){
				  out.write(b,0,size);
				  size = in.read(b);
			  }
			 
	      } catch (Exception e) {
	    	  map.put("errorCode", "-1");
	    	  map.put("errorMsg", "下载文件出现异常");
	      } finally {
		        try {
		        	in.close();
		        	out.close();
		        } catch (IOException e) {
		        	map.put("errorCode", "-1");
		        	map.put("errorMsg", "下载文件出现异常");
		        }
	      }
	    
	    
	    return map;
	  }
	  
	  
	  @RequestMapping(value = "/openAttach.do", method = { RequestMethod.GET })
	  @ResponseBody
	  public Map<String, Object> openFile(HttpServletRequest request) {
	    Map<String, Object> map = new HashMap<String, Object>();
	    String filePath=request.getParameter("filePath");
	      File file = new File(filePath);
	      if (!file.exists()) {
	          map.put("errorCode", "-1");
	          map.put("errorMsg", "预览的文件不存在，可能已经被移除！");
	          return map;
	      }
		  try{	  
			  Runtime.getRuntime().exec("rundll32 url.dll FileProtocolHandler "  +  filePath);
	      } catch (Exception e) {
	    	  map.put("errorCode", "-1");
	    	  map.put("errorMsg", "预览文件出现异常");
	      }
	    return map;
	  }
	  
	  public static void makeDir(String fpath,boolean includef){
		  String fb="";
		  String[] fp = fpath.split(":");
		  if(fp.length>1){
			  fb=fp[0]+":";
		  }
		  makeDir(fp[fp.length-1],fb,includef);	    	 	  
	  }
	  
	  /**
	   *  根据目录参数,创建无限层的目录结构
	   *  如果路径包含文件名,不要将文件名作为目录创建
	   */
	  public static void makeDir(String fileDir,String context,boolean includef){

			if(includef){
				  int pos=fileDir.lastIndexOf(File.separatorChar);
				  fileDir=fileDir.substring(0, pos);
			}
			String fpath = context+fileDir;
			File tf=new File(fpath);
			if(tf.isDirectory() && tf.exists()) {
				return;
			}
			StringTokenizer stringTokenizer = new StringTokenizer(fileDir, "/");
			String strTemp = "";
			while (stringTokenizer.hasMoreTokens()) {
				String str = stringTokenizer.nextToken();
				if("".equals(strTemp)){
					strTemp = str;
				}
				else{
					strTemp = strTemp + "/" + str;
				}
				File dir = new File(context + strTemp);
				if (!dir.isDirectory()) {
					dir.mkdirs();
				}
			}
	 }
	  
	  /**
	   * 获得当前时间 
	   */
	 public static String getDate(){
		    SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		    return sdf.format(new Date());

	 }
}
